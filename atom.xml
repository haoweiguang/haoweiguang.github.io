<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>微光的Notes</title>
  
  <subtitle>梦想是要有的，万一实现了呢</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://haoweiguang.me/"/>
  <updated>2019-12-04T07:44:26.155Z</updated>
  <id>http://haoweiguang.me/</id>
  
  <author>
    <name>Light微光</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019年度书单</title>
    <link href="http://haoweiguang.me/2019/12/04/2019-reading-list/"/>
    <id>http://haoweiguang.me/2019/12/04/2019-reading-list/</id>
    <published>2019-12-04T01:43:42.000Z</published>
    <updated>2019-12-04T07:44:26.155Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>历史<br>经济<br>教育</p><p>《小岛经济学》<br>简介<br>读后感<br>摘抄<br>《反脆弱》<br>《送你一颗子弹》<br>《随机漫步的傻瓜》<br>《HBO的内容战略》<br>《优秀的绵羊》<br>《人地城》<br>《你凭什么做好互联网》<br>《java并发编程实践》<br>《Spring实战》<br>《深入理解Java虚拟机》<br>《生而贫穷》<br>《讲给大家的中国历史 01 中国是怎么出现的》<br>《大学之路》<br>《优秀的绵羊》<br>《第一本经济学》<br>先列出来，简介和读书笔记，后续慢慢补充……</p><p>参考：<a href="https://mp.weixin.qq.com/s/NnLM5vgf8sT4H6KpRRggRQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/NnLM5vgf8sT4H6KpRRggRQ</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot; title=&quot;分类&quot;&gt;&lt;/a&gt;分类&lt;/h3&gt;&lt;p&gt;历史&lt;br&gt;经济&lt;br&gt;教育&lt;/p&gt;
&lt;p&gt;《小岛经济学》&lt;br&gt;简介&lt;br&gt;读后感&lt;br&gt;摘抄&lt;br&gt;《反脆弱》&lt;br&gt;《送你一颗子弹》&lt;
      
    
    </summary>
    
      <category term="随笔" scheme="http://haoweiguang.me/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>RESTful API规范</title>
    <link href="http://haoweiguang.me/2019/12/02/RESTful-API%E8%A7%84%E8%8C%83/"/>
    <id>http://haoweiguang.me/2019/12/02/RESTful-API规范/</id>
    <published>2019-12-02T07:27:35.000Z</published>
    <updated>2019-12-04T01:48:06.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h2><h3 id="URI规范"><a href="#URI规范" class="headerlink" title="URI规范"></a>URI规范</h3><ul><li>不要用大写</li><li>单词间使用下划线’_’</li><li>不使用动词，资源要使用名词复数形式，如：users、rooms、tickets</li><li>层级大于等于三层，则使用’?’带参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sers/1/address/2/citys (bad) /citys?users=1&amp;address=2; (good)</span><br></pre></td></tr></table></figure></li></ul><h4 id="避免层级过深的URI"><a href="#避免层级过深的URI" class="headerlink" title="避免层级过深的URI"></a>避免层级过深的URI</h4><p>过深的导航容易导致url膨胀，不易维护，如 <code>GET /zoos/1/areas/3/animals/4</code>，尽量使用查询参数代替路径中的实体导航，如<code>GET /animals?zoo=1&amp;area=3</code>；</p><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><ul><li>GET：查询资源</li><li>POST：创建资源</li><li>PUT：全量更新资源（提供改变后的完整资源）</li><li>PATCH：局部更新资源（仅提供改变的属性）</li><li>DELETE：删除资源</li></ul><p>下面一些例子</p><ul><li>GET /zoos：列出所有动物园</li><li>POST /zoos：新建一个动物园</li><li>GET /zoos/ID：获取某个指定动物园的信息</li><li>PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</li><li>PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</li><li>DELETE /zoos/ID：删除某个动物园</li><li>GET /zoos/ID/animals：列出某个指定动物园的所有动物</li><li>DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</li></ul><h3 id="安全性与幂等性"><a href="#安全性与幂等性" class="headerlink" title="安全性与幂等性"></a>安全性与幂等性</h3><ul><li>安全性：任意多次对同一资源操作，都不会导致资源的状态变化</li><li>幂等性：任意次对同一资源操作，对资源的改变是一样的 </li></ul><table><thead><tr><th>Method</th><th style="text-align:center">安全性</th><th style="text-align:center">幂等性</th></tr></thead><tbody><tr><td>GET</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td>POST</td><td style="text-align:center">否</td><td style="text-align:center">否</td></tr><tr><td>PUT</td><td style="text-align:center">否</td><td style="text-align:center">是</td></tr><tr><td>PATCH</td><td style="text-align:center">否</td><td style="text-align:center">是</td></tr><tr><td>DELETE</td><td style="text-align:center">否</td><td style="text-align:center">是</td></tr></tbody></table><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><h3 id="Method-1"><a href="#Method-1" class="headerlink" title="Method"></a>Method</h3><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><p>非id的参数使用’?’方式传输<br><code>/users/1?state=closed</code></p><h4 id="POST、PATCH、PUT、DELETE"><a href="#POST、PATCH、PUT、DELETE" class="headerlink" title="POST、PATCH、PUT、DELETE"></a>POST、PATCH、PUT、DELETE</h4><p>非id的参数使用body传输，并且应该encode</p><h4 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h4><p><code>?type=1&amp;state=closed</code></p><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><p><code>?size=10&amp;page=1</code></p><ul><li>size：返回记录数量</li><li>page：第几页</li></ul><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p>三种方案：</p><ul><li>在uri中加入版本： /v1/room/1</li><li>Accept Header：Accept: v1</li><li>自定义 Header：X-ProjectName-Media-Type: projectname.v1 (我们使用此方案)</li></ul><h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><p><strong>成功</strong></p><table><thead><tr><th>Code</th><th>Method</th><th>Describe</th></tr></thead><tbody><tr><td>200</td><td>ALL</td><td>请求成功并返回实体资源</td></tr><tr><td>201</td><td>POST</td><td>创建资源成功</td></tr></tbody></table><p><strong>客户端错误</strong></p><table><thead><tr><th>Code</th><th>Method</th><th>Describe</th></tr></thead><tbody><tr><td>400</td><td>ALL</td><td>参数错误</td></tr><tr><td>401</td><td>ALL</td><td>用户验证失败（用户名、密码错误等）</td></tr><tr><td>404</td><td>ALL</td><td>资源不存在</td></tr></tbody></table><p><strong>服务器错误</strong></p><table><thead><tr><th>Code</th><th>Method</th><th>Describe</th></tr></thead><tbody><tr><td>500</td><td>ALL</td><td>服务器未知错误</td></tr></tbody></table><p><img src="http://images.insuncle.com/mweb/5C699083-6F00-4CCD-ABFD-1FDF4775F610.png" alt="5C699083-6F00-4CCD-ABFD-1FDF4775F610"></p><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><p><strong>不要包装：response的body直接就是数据，不要做多余的包装。</strong><br>错误示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;success&quot;:true,</span><br><span class="line">    &quot;data&quot;:&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;xiaotuan&quot;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>正确示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;xiaotuan&quot;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>json格式的约定：</strong></p><ul><li>时间用长整形(毫秒数)，客户端自己按需解析（moment.js）</li><li>不传null字段</li></ul><h3 id="分页response"><a href="#分页response" class="headerlink" title="分页response"></a>分页response</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;paging&quot;:&#123;&quot;limit&quot;:10,&quot;offset&quot;:0,&quot;total&quot;:729&#125;,</span><br><span class="line">    &quot;data&quot;:[&#123;&#125;,&#123;&#125;,&#123;&#125;...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><ol><li>不要发生了错误但给2xx响应，客户端可能会缓存成功的http请求；</li><li>正确设置http状态码，不要自定义；</li><li>Response body 提供 1) 错误的代码（日志/问题追查）；2) 错误的描述文本（展示给用户）。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;code&quot; : 1234,</span><br><span class="line">  &quot;message&quot; : &quot;Something bad happened :-(&quot;,</span><br><span class="line">  &quot;description&quot; : &quot;More details about the error here&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对PUT,POST,PATCH的输入的校验也应该返回相应的错误信息，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;status&quot;: 400,</span><br><span class="line">&quot;developerMessage&quot;: &quot;Verbose, plain language description of the problem. Provide developers suggestions about how to solve their problems here&quot;,</span><br><span class="line">&quot;userMessage&quot;: &quot;This is a message that can be passed along to end-users, if needed.&quot;,</span><br><span class="line">&quot;errorCode&quot;: &quot;444444&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://imweb.io/topic/5707561f06f2400432c139a5" target="_blank" rel="noopener">http://imweb.io/topic/5707561f06f2400432c139a5</a><br><a href="https://blog.restcase.com/rest-api-error-codes-101/" target="_blank" rel="noopener">https://blog.restcase.com/rest-api-error-codes-101/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;URI&quot;&gt;&lt;a href=&quot;#URI&quot; class=&quot;headerlink&quot; title=&quot;URI&quot;&gt;&lt;/a&gt;URI&lt;/h2&gt;&lt;h3 id=&quot;URI规范&quot;&gt;&lt;a href=&quot;#URI规范&quot; class=&quot;headerlink&quot; title=&quot;URI规范&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="架构" scheme="http://haoweiguang.me/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="restful" scheme="http://haoweiguang.me/tags/restful/"/>
    
  </entry>
  
  <entry>
    <title>Naval:Work As Hard As You Can（尽自己最大努力工作）</title>
    <link href="http://haoweiguang.me/2019/11/18/Naval-Work-As-Hard-As-You-Can/"/>
    <id>http://haoweiguang.me/2019/11/18/Naval-Work-As-Hard-As-You-Can/</id>
    <published>2019-11-18T13:52:12.000Z</published>
    <updated>2019-11-19T05:55:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://nav.al/work-hard" target="_blank" rel="noopener">https://nav.al/work-hard</a> </p><p>Work as hard as you can. Even though what you work on and who you work with are more important. </p><p>尽自己最大努力工作。即使你的工作内容，以及和谁一起工作更重要。 </p><p><strong>Work as hard as you can</strong></p><p>尽自己最大努力去工作</p><p>Let’s talk about hard work. There’s a battle that happens on Twitter a lot. Should you work hard or should you not? David Heinemeier Hansson says, “It’s like you’re slave-driving people.” Keith Rabois says, “No, all the great founders worked their fingers to the bone.” </p><p>我们来说说努力工作。推特上有很多这个话题的讨论。是应该努力工作还是不应该？David Heinemeier Hansson说：“就像您是奴隶主。”Keith Rabois说：“不，所有伟大的创始人都是辛勤工作的。” </p><p>They’re talking past each other. </p><p>他们在彼此背后说话。 </p><p>First of all, they’re talking about two different things. David is talking about employees and a lifestyle business. If you’re doing that, your number one priority is not getting wealthy. You have a job, a family and also your life. </p><p>首先，他们是在讨论两个不同的事情。David讨论的是关于雇员和生活方式型企业（属于小企业的一种特定的类型，其设立的目标一般是维持特定的收入水平，而不是更高的收入，而更多的动机则是创立者个人的兴趣、爱好和技能）。如果你在这种企业中，你的首要任务不是让自己变的更富有。你有一份工作、一个家庭，另外还有你的生活。 </p><p>Keith is talking about the Olympics of startups. He’s talking about the person going for the gold medal and trying to build a multi-billion dollar public company. That person has to get everything right. They have to have great judgment. They have to pick the right thing to work on. They have to recruit the right team. They have to work crazy hard. They’re engaged in a competitive sprint. </p><p>Keith正在谈论创业的奥林匹克竞赛【表示竞争很激烈】。他说的是那些想夺取金牌，并试图建立一个数十亿美金的上市公司的人。这些人必须把每件事都做对。他们必须有非凡的判断力。他们必须选择正确的工作。他们必须打造优秀的团队。他们必须疯狂的工作。他们正在进行一场竞争性的冲刺。 </p><p>If getting wealthy is your goal, you’re going to have to work as hard as you can. But hard work is no substitute for who you work with and what you work on. Those are the most important things. </p><p>如果你的目标是变得富有，那么你必须尽自己最大的努力工作。但是，努力工作并不能取代你同谁一起工作以及你从事工作的重要性。这两件事更重要。 </p><p><strong>What you work on and who you work with are more important</strong></p><p>你从事什么工作，和谁一起工作是最最重要的事 </p><p>Marc Andreessen came up with the concept of the “product-market fit.” I would expand that to “product-market-founder fit,” taking into account how well a founder is personally suited to the business. The combination of the three should be your overwhelming goal. </p><p>Marc Andreessen提出了“product-market fit.（可以理解为产品符合市场需求）【注1】”的概念。我将其扩展到“产品-市场-创始人匹配”。考虑到什么是创始人个人适合企业的能力。这三者（对的人、对的事、努力工作）的结合应该是您的压倒性目标。 </p><p>You can save a lot of time by picking the right area to work in. Picking the right people to work with is the next most important piece. Third comes how hard you work. They are like three legs of a stool. If you shortchange any one of them, the whole stool is going to fall. You can’t easily pick one over the other. </p><p>你能找到适合自己的工作，那将会节省你很多时间。找到合适的人一起工作是下一件最重要的事。第三是你工作的努力程度。它们就像凳子的三条腿。如果你少找其中任何一个，整个凳子都会倒掉。你不能轻易地选择其中一个。 </p><p>When you’re building a business, or a career, first figure out: “What should I be doing? Where is a market emerging? What’s a product I can build that I’m excited to work on, where I have specific knowledge?” </p><p>当你去创业，或是攻读学位，首先要弄清楚：“我应该做什么？哪里是新兴市场？ 什么样的产品是我可以创造出来，并且我有特定的知识，能让我兴奋地投入到工作中去? ” </p><p><strong>No matter how high your bar is, raise it</strong></p><p>不论你的标准有多高，提高它 </p><p>Second, surround yourself with the best people possible. If there’s someone greater out there to work with, go work with them. When people ask for advice about choosing the right startup to join, I say, “Pick the one that’s going to have the best alumni network for you in the future.” Look at the PayPal mafia—they worked with a bunch of geniuses, so they all got rich. Pick the people with the highest intelligence, energy and integrity that you can find. </p><p>第二点，尽可能让自己身边有最好的人一起工作。如果有更优秀的人可以一起工作，赶紧去吧。当有人向我咨询应该怎么选择合适的创业公司加入时，我会告诉他，“选择那些可以让你在未来有更好校友网络的人。”你看PayPal黑帮，他们和一堆天才打交道，所以他们都变的很富有。尽自己最大努力去寻找那些最聪明、最有活力、最正直的人。 </p><p>And no matter how high your bar is, raise it. </p><p>不论你的标准有多高，提高它 </p><p>Finally, once you’ve picked the right thing to work on and the right people, work as hard as you can. </p><p>最后，当你选择了正确事和好的合作伙伴，那就尽你所能努力工作吧。 </p><p><strong>Nobody really works 80 hours a week</strong></p><p>没有人真的一周工作80个小时 </p><p>This is where the mythology gets a little crazy. People who say they work 80-hour weeks, or even 120-hour weeks, often are just status signaling. It’s showing off. Nobody really works 80 to 120 hours a week at high output, with mental clarity. Your brain breaks down. You won’t have good ideas. </p><p>这就是神话变得有点疯狂的地方。那些声称自己每周工作80小时，甚至120小时的人，往往只是给自己打的标签而已。这是在炫耀。没有人真的可以在每周工作80到120小时的情况下，还能保持高产出和头脑清晰。你的大脑崩溃了。你不会有好想法产生。 </p><p>The way people tend to work most effectively, especially in knowledge work, is to sprint as hard as they can while they feel inspired to work, and then rest. They take long breaks. </p><p>对于知识工作者来说，最有效率的工作方式是，当他们有激情工作的时候，就尽可能去冲刺，然后好好休息。他们会休息很长时间。 </p><p>It’s more like a lion hunting and less like a marathoner running. You sprint and then you rest. You reassess and then you try again. You end up building a marathon of sprints. </p><p>这更像一只在狩猎狮子，而不是马拉松运动员。你先冲刺，然后休息。你重新评估，然后再试一次。你最终建立了一个马拉松式的短跑。 </p><p><strong>Inspiration is perishable</strong></p><p>灵感稍纵即逝 </p><p>Inspiration is perishable. When you have inspiration, act on it right then and there. </p><p>灵感稍纵即逝。当你有灵感的时候，立马行动起来。 </p><p>If I’m inspired to write a blog post or publish a tweetstorm, I should do it right away. Otherwise, it’s not going to get out there. I won’t come back to it. Inspiration is a beautiful and powerful thing. When you have it, seize it. </p><p>当我有灵感想要写一篇博客或发表一篇推特风暴，我应该立马去做。否则，它不会发出来。我不会再回来发送他们。灵感是一种美丽而强大的东西。当你拥有它时，抓住它。 </p><p><strong>Impatience with actions, patience with results</strong></p><p>对行动缺乏耐心，对结果充满耐心 </p><p>People talk about impatience. When do you know to be impatient? When do you know to be patient? My glib tweet on this was: “Impatience with actions, patience with results.” I think that’s a good philosophy for life. </p><p>人们谈论不耐烦。什么时候应该缺乏耐心？什么时候应该拥有耐心？我在推特上油嘴滑舌的写道：“对行动缺乏耐心，对结果充满耐心。”我认为这是一个很好的人生哲学。 </p><p>Anything you have to do, get it done. Why wait? You’re not getting any younger. </p><p>无论你要做什么，行动起来。为什么要等？你已不再年轻。 </p><p>You don’t want to spend your life waiting in line. You don’t want to spend it traveling back and forth. You don’t want to spend it doing things that aren’t part of your mission. </p><p>你不想一辈子都排队等候吧。你不会想把时间花在来回旅行上。你不想把时间花在不属于你使命的事情上。 </p><p>When you do these things, do them as quickly as you can and with your full attention so you do them well. Then be patient with the results because you’re dealing with complex systems and a lot of people. </p><p>当你要做这些事情的时候，尽可能快的去做，全神贯注的去做，这样你才能做好他们。然后耐心的等待结果，因为你面对的是复杂的系统和很多人。 </p><p>It takes a long time for markets to adopt products. It takes time for people to get comfortable working with each other. It takes time for great products to emerge as you polish away. </p><p>需要很长时间市场才能接受你的产品。人们需要时间来适应彼此的工作。伟大的产品需要时间的磨砺。</p><p>Impatience with actions, patience with results. </p><p>对行动缺乏耐心，对结果充满耐心 </p><p>If I discover a problem in one of my businesses, I won’t sleep until the resolution is at least in motion. If I’m on the board of a company, I’ll call the CEO. If I’m running the company, I’ll call my reports. If I’m responsible, I’ll get on it, right then and there, and solve it. </p><p>如果我在自己的生意中遇到了问题，至少在解决方案开始实施之前，我不会睡觉。 如果我是一家公司的董事会成员，我会打电话给首席执行官。 如果由我来管理公司，我会给我的报告打电话【这句话不知道怎么翻译妥当】。 如果是我的责任，我会马上着手解决这个问题。 </p><p>If I don’t solve a problem the moment it happens—or if I don’t move towards solving it—I have no peace. I have no rest. I have no happiness until the problem is solved. So I solve it as quickly as possible. I literally won’t sleep until it’s solved—maybe that’s just a personal characteristic. But it’s worked out well in business. </p><p>如果问题发生的那一刻我没有解决它，或者我没有让事情朝着正确的方向推进，我会坐立不安。我不会休息。除非事情解决，否则我不会快乐。所以我尽可能快地解决它。在问题解决之前，我是不会睡觉的ーー也许这只是我个人的特点。 但是这在商业上运作良好。 </p><p>【注1】product/market fit，简称PMF，意思是产品符合市场需求（如此精髓的概念直译过来为何如此苍白-_-!!!），这是大名鼎鼎的Marc Andreesen提出来的概念，他认为：世上的创业公司只有两种，一种是找到PMF的，一种是没找到的。详细解释可以参考<a href="https://www.zhihu.com/question/19658333/answer/109388889" target="_blank" rel="noopener">该链接</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文：&lt;a href=&quot;https://nav.al/work-hard&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://nav.al/work-hard&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Work as hard as you can. Even t
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://haoweiguang.me/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Naval" scheme="http://haoweiguang.me/tags/Naval/"/>
    
      <category term="人生经验" scheme="http://haoweiguang.me/tags/%E4%BA%BA%E7%94%9F%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Git分支策略-我的实践</title>
    <link href="http://haoweiguang.me/2019/10/18/Git%E5%88%86%E6%94%AF%E7%AD%96%E7%95%A5-%E6%88%91%E7%9A%84%E5%AE%9E%E8%B7%B5/"/>
    <id>http://haoweiguang.me/2019/10/18/Git分支策略-我的实践/</id>
    <published>2019-10-18T08:23:59.000Z</published>
    <updated>2019-10-29T05:00:32.407Z</updated>
    
    <content type="html"><![CDATA[<p>具体策略还是要根据项目的大小和复杂度来定。遵循的原则是先简单，然后根据项目情况不断的精细化，不要上来就搞一个特别复杂的规则。</p><p>这样做的好处：</p><ul><li>简单，团队更容易接受、执行，更易操作</li><li>简单也更不容易出错</li></ul><p>如果是个全新的项目，我觉着保留一个主干master，和线上代码一致，仅用来发布新版本。不用非得维护一个develop分支，这样反而麻烦。在项目上线之前，规则都相对简单。但是等项目上线后，问题就慢慢复杂了。因为你分支策略还得考虑怎么保证master和线上一致。我们分多个场景来讲：</p><h3 id="场景1-我们要添加一个新功能"><a href="#场景1-我们要添加一个新功能" class="headerlink" title="场景1 我们要添加一个新功能"></a>场景1 我们要添加一个新功能</h3><h4 id="场景1-1-当前没有并行的功能"><a href="#场景1-1-当前没有并行的功能" class="headerlink" title="场景1.1 当前没有并行的功能"></a>场景1.1 当前没有并行的功能</h4><p>1.开发的时候先从master建一个功能分支，命名：Feature-xxx，后续在此基础上做开发就行了，视情况决定是否建个人分支（命名：Feature-xxx-light）</p><p>2.功能开发完成，准备提测，如果是按照瀑布模型开发，可以直接把Feature分支的代码部署到测试环境（QA），发现bug直接在此分支修改就行，然后部署到测试环境；如果是敏捷开发，那最好分出来一个测试分支，因为该功能分支还得继续开发，可能会包含未完成的功能，这时候如果拿功能分支部署测试环境，会遇到问题。如果开辟了一个测试分支，这样就把开发跟测试隔离了，测试环境的bug什么都可以在测试分支搞定。</p><p>3.（可选）  开发测试完成提交到pre-production</p><p>4.（可选）  进一步测试没有问题提交到release分支</p><p>5.后续就是上线，则合并到master分支，并在master分支上做发布</p><p>6.（可选）  如果需要延迟发布则新建production分支（比如，等待iOS审核，需遵守upstream first）</p><h4 id="场景1-2-有多个功能并行"><a href="#场景1-2-有多个功能并行" class="headerlink" title="场景1.2 有多个功能并行"></a>场景1.2 有多个功能并行</h4><p>可能有个极端情况就是两个团队需要开发同一个功能，我觉着这种情况在前期任务划分的时候就应该尽量避免掉，实在无法避免，可以让一个团队负责开发，并暴露接口供另一个团队调用</p><p>其实流程跟场景1.1差不多，就是从哪里新开分支，怎么合并会遇到些问题？</p><p>还是从master创建分支。合并的时候根据项目情况选择是合并到pre-production或release，反正最终要合并到master分支并做发布。</p><h3 id="场景2-发现了线上bug"><a href="#场景2-发现了线上bug" class="headerlink" title="场景2 发现了线上bug"></a>场景2 发现了线上bug</h3><p>最重要的是记得记得保存当前的代码，别一着急把当前的代码丢了，那真会欲哭无泪。<br>1.如果本地还在开发，记得先使用git stash暂存，以免切换到master后代码丢失</p><p>2.从master创建本地bug分支，命名：bugfix-xxx</p><p>3.修复bug</p><p>4.（可选）修改测试完成后依次同步到pre-produciton和release分支</p><p>5.各个环境的测试通过，合并到master，并在master上做发布</p><p>6.切换到自己的开发分支，使用git stash恢复暂存，继续工作</p><p>但这些也不够全面，想到哪写到哪，后续持续迭代吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;具体策略还是要根据项目的大小和复杂度来定。遵循的原则是先简单，然后根据项目情况不断的精细化，不要上来就搞一个特别复杂的规则。&lt;/p&gt;
&lt;p&gt;这样做的好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单，团队更容易接受、执行，更易操作&lt;/li&gt;
&lt;li&gt;简单也更不容易出错&lt;/li&gt;
&lt;/u
      
    
    </summary>
    
      <category term="利器" scheme="http://haoweiguang.me/categories/%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="Git" scheme="http://haoweiguang.me/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>徐十胖公众号所得</title>
    <link href="http://haoweiguang.me/2019/09/01/%E5%BE%90%E5%8D%81%E8%83%96%E5%85%AC%E4%BC%97%E5%8F%B7%E6%89%80%E5%BE%97/"/>
    <id>http://haoweiguang.me/2019/09/01/徐十胖公众号所得/</id>
    <published>2019-08-31T16:21:14.000Z</published>
    <updated>2019-11-19T05:55:11.211Z</updated>
    
    <content type="html"><![CDATA[<p>最近看了他的文章，感觉有所收获，就准备把他公众号有用的文章翻来看看，我把一些收获总结一下。</p><p>写作对我虽然难，更要多写，复盘，大力出奇迹</p><p><strong>执行力是基础，大力出奇迹，干干干</strong>。多次在不同文章提到执行力的重要性。为啥这样说呢，他的观点是在你很弱的时候，你的思考能力和执行能力必然都是很弱的。<strong>思考能力很弱，很多事情你是根本想不清楚的</strong>，因为一个是逻辑不过关，一个是因为见的不够多，做的不够多！就像一个经典的笑话：乞丐说，等我发财了，我就买个大房子，天天坐在门口要饭吃。</p><p><strong>专注</strong>，没钱的时候，做事一定要专注，<strong>把小事做好，然后做深，做大</strong>。多做试验，找到适合自己的方法，然后拼命跑马圈地。</p><p><strong>团队</strong>，想做事赚钱一定要有团队</p><p><strong>知道自己短处和长处，并总是想法突破自己</strong>，文章中提到“确实没有办法耐着性子研究技术”，后来转到产品岗位，发现自己特别喜欢，但是转到产品岗，也是吃了不少苦头，打击最大的一次是把美团几万人使用的系统给搞挂了，因此差点辞职。但是通过自己不断的学习和突破，坚持了下来，后边绩效也很好。</p><p>除了主业，还得多去尝试和试验，不断接触新人、新知识，提升认知</p><p>什么是牛逼？<strong>能够克服得了难的东西，持续的做下去，不断的思考，做深，做精。哪怕最后没有结果，与困难战斗的过程中越战越强，本身就是很爽的事情。</strong>【这个估计也是作者的目标】<br><strong>什么事都是有代价的</strong>，比我漂泊在外，就能换取自己的一份自由，想干嘛就干嘛</p><p>Reversion History<br>2019.9.1 第一次记录</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近看了他的文章，感觉有所收获，就准备把他公众号有用的文章翻来看看，我把一些收获总结一下。&lt;/p&gt;
&lt;p&gt;写作对我虽然难，更要多写，复盘，大力出奇迹&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;执行力是基础，大力出奇迹，干干干&lt;/strong&gt;。多次在不同文章提到执行力的重要性。为啥这样
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://haoweiguang.me/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="人生经验" scheme="http://haoweiguang.me/tags/%E4%BA%BA%E7%94%9F%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>我为什么写作</title>
    <link href="http://haoweiguang.me/2019/08/29/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E5%86%99%E4%BD%9C/"/>
    <id>http://haoweiguang.me/2019/08/29/我为什么写作/</id>
    <published>2019-08-29T05:55:18.000Z</published>
    <updated>2019-10-17T05:57:40.761Z</updated>
    
    <content type="html"><![CDATA[<p>其实我对写作有很大的心里恐惧。还记刚上初中时，因为作文写不好彻夜难眠，也哭了无数次。有一次考试作文竟然只憋出来了6行，得了6分，至今难忘。但是我认为写作还是很有用处，所以也就硬着头皮写吧，以下说说我对写作的理解。</p><p>写作大概能分为两种，一种是为自己而写，主要想通过写作来更好的学习、思考、记录、复盘等；一种是为他人而写，通过写作扩大影响力、赚钱等等。我的目标是“<strong>为自己而写</strong>”。</p><p><strong>为了深度思考</strong>，把自己学的东西。通过写作，将自己的思考转换为文字后，很多实践经验和总结往往才能够真正的系统化和结构化，同时完成整个思维的抽象和升华过程。写作有时候像教人，能把一件事写明白了，证明自己掌握的也挺好的了。</p><p><strong>让自己慢下来</strong>，平时看的太多，太杂，除了通过写作来梳理，为了更好的吸收，其实<strong>写作是真正能够让人平静下来的事情</strong>，写作是在安静的时候，一个人，自己和自己的心灵的对话，让自己听到自己内心的声音。</p><p>也有一些<strong>交流的需要</strong>，我现在有个习惯，就是如果觉着一个人思想还不错，我就会去找他的博客、公众号等，把他写的文章看一遍，就能大概了解这个人了，减少了沟通的成本。</p><p>你们有没有觉着回忆是不准确的，我们经常修改和美化自己的记忆，以验证自己当下的判断（就像“禀赋效应”那样）。所以记录下来，回头再看，是对自己成长过程最好的交代。另外，记录当时状态对于人生也是一份宝贵的财富。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/" target="_blank" rel="noopener">为什么你应该（从现在开始就）-刘未鹏</a></li><li><a href="https://fatesinger.com/100080" target="_blank" rel="noopener">当我谈博客时我在谈些什么-Fatesinger</a></li><li><a href="https://yukunwu.wordpress.com/why-write-blogs/" target="_blank" rel="noopener">为何写作-zero</a></li></ul><h3 id="Revision-history"><a href="#Revision-history" class="headerlink" title="Revision history"></a>Revision history</h3><p>2019.8.29 开写</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其实我对写作有很大的心里恐惧。还记刚上初中时，因为作文写不好彻夜难眠，也哭了无数次。有一次考试作文竟然只憋出来了6行，得了6分，至今难忘。但是我认为写作还是很有用处，所以也就硬着头皮写吧，以下说说我对写作的理解。&lt;/p&gt;
&lt;p&gt;写作大概能分为两种，一种是为自己而写，主要想通
      
    
    </summary>
    
      <category term="随笔" scheme="http://haoweiguang.me/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="写作" scheme="http://haoweiguang.me/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>读《股票作手回忆录》</title>
    <link href="http://haoweiguang.me/2019/08/24/%E8%AF%BB%E3%80%8A%E8%82%A1%E7%A5%A8%E4%BD%9C%E6%89%8B%E5%9B%9E%E5%BF%86%E5%BD%95%E3%80%8B/"/>
    <id>http://haoweiguang.me/2019/08/24/读《股票作手回忆录》/</id>
    <published>2019-08-24T14:21:46.000Z</published>
    <updated>2019-11-05T14:24:16.504Z</updated>
    
    <content type="html"><![CDATA[<h3 id="自己认为比较有收获的点"><a href="#自己认为比较有收获的点" class="headerlink" title="自己认为比较有收获的点"></a>自己认为比较有收获的点</h3><ul><li>坚持自己独立思考，必须对自己和自己的判断充满信心，不断跟市场学习，虽然这要付出金钱的代价，但是没有捷径，因为一个人从自己的错误中总结经验，需要经历漫长的过程。找到自己的优势、缺点，记录每次亏损或失误的原因，不断复盘来不断改进修炼，让某些操作成为潜意识</li><li>赚大钱不能靠股价的短期波动，而要靠大趋势，看对趋势，买进仓位后就持有不动，直到你觉得牛市将尽，抛出获利</li><li>用筹码去测试市场，市场永远是对的，识别最小阻力位是个艺术</li><li>止损，出错的时候必须认错，然后卖掉；止盈，牛市时广大股民一开始都能赚钱，可后来都因为流连于牛市不肯收手而亏损</li><li>不要受情绪的影响，亲情、感激之情、愧疚</li></ul><h3 id="一些摘抄"><a href="#一些摘抄" class="headerlink" title="一些摘抄"></a>一些摘抄</h3><blockquote><p>市场信号出现之前，不要操作。<br> 股价上涨时，不要问它为啥涨，持续买进自然会推动股价上涨。</p><p>只有真金白银才能证明自己观点的正确性<br>试错是股市永恒的主题</p><p>判断对错并不重要，重要的在于正确时获取多大利润，错误时亏损了多少<br>市场对我有利，就在自己财力范围内尽可能大规模交易</p><p>防止成为“股呆”，图标分析不是万能的，别成为查理芒格说的“拿着锤子，看谁都像钉子”的人，扩大专注面。<br>投资一定要理论结合实际，既要研究理论，也要善于在实际操作中变通</p><p>搞清楚自己的交易对手是谁</p><p>没有一个人能抓住所有起伏，不理会大波动，总是抢进抢出，这是投资大忌<br>不要尝试去抓住最初或最后的八分之一点利润</p><p>择时很重要啊<br>最重要的能力是能保证对买进卖出时机判断的正确率和在错误时及时止损的能力</p><p>牛市整体上扬才有机会挣大钱，走势要依赖整个经济环境<br>股票投机中，解读行情很重要，在正确的时间进场、坚持自己的立场也同样重要。更重要的是必须研究和评估经济形势，这样才能准确预测市场可能会往哪个方向发展</p><p>研究人性让你受益匪浅<br>人性的两大弱点~希望与恐惧<br>最致命的敌人来自自己的内心<br>最危险的敌人就是聪明的朋友的热切规劝和人格魅力<br>赌博的心态要不得</p><p>股票投机成功原则的基础是：人类会在将来犯过去犯过的相同的错误<br>股票投机永远不会消失，因为人性不希望它消失</p><p>操盘技巧<br>K线是个好的宣传工具<br>炒作的目的通常是激活市场，让自己能随时以某个价位抛出大宗股票<br>要让一只股票一路上涨，第一步是让它先涨起来<br>没人愿意做空这种股权不够分散的股票，因为你会完全受制于持股的内线集团</p><p>知道不该做什么和知道什么该做同样重要</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;自己认为比较有收获的点&quot;&gt;&lt;a href=&quot;#自己认为比较有收获的点&quot; class=&quot;headerlink&quot; title=&quot;自己认为比较有收获的点&quot;&gt;&lt;/a&gt;自己认为比较有收获的点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;坚持自己独立思考，必须对自己和自己的判断充满信心，不断跟
      
    
    </summary>
    
      <category term="财富投资" scheme="http://haoweiguang.me/categories/%E8%B4%A2%E5%AF%8C%E6%8A%95%E8%B5%84/"/>
    
    
      <category term="人物传记" scheme="http://haoweiguang.me/tags/%E4%BA%BA%E7%89%A9%E4%BC%A0%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>程序员健康生活指南总目录</title>
    <link href="http://haoweiguang.me/2019/04/22/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%81%A5%E5%BA%B7%E7%94%9F%E6%B4%BB%E6%8C%87%E5%8D%97%E6%80%BB%E7%9B%AE%E5%BD%95/"/>
    <id>http://haoweiguang.me/2019/04/22/程序员健康生活指南总目录/</id>
    <published>2019-04-22T07:07:16.000Z</published>
    <updated>2019-10-27T12:29:03.693Z</updated>
    
    <content type="html"><![CDATA[<p>收录了《程序员健康生活指南》的中文翻译，给为码友可以关注下一。</p><ul><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTYwNTQxNQ==&amp;mid=2649558473&amp;idx=1&amp;sn=d3008accd5067725f9c923dd5c527539&amp;chksm=83a72901b4d0a017350d800c10abb20ef6c72b89e36c89850b45f6edc107c6c202796dd352f5&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">程序员健康生活指南(一) - 前言</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTYwNTQxNQ==&amp;mid=2649558485&amp;idx=1&amp;sn=e5fbd41db021ecb36fa1e3c1d4903ffd&amp;chksm=83a7291db4d0a00b5051bd5d7953aa997eb8f1e0144a62757348c28b89f4ea59577f9a1d9fad&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">程序员健康生活指南(二) - 做出改变</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTYwNTQxNQ==&amp;mid=2649558489&amp;idx=1&amp;sn=4dc8c675e3c29dd0557d7616c3f260d3&amp;chksm=83a72911b4d0a00760d165fd40ba37984fc83bb5d548ea8250b9b7116315a03530aaacd7fe7e&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">程序员健康生活指南(三) - 努力健康起来吧</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTYwNTQxNQ==&amp;mid=2649558493&amp;idx=1&amp;sn=00f17f854a7d7d2e05ec6678d9020711&amp;chksm=83a72915b4d0a003f0b8e54d072db054d61eac9ca7e02627ce583878baa6adca5c3681473105&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">程序员健康生活指南(四)-永别了,椅子？</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTYwNTQxNQ==&amp;mid=2649558494&amp;idx=1&amp;sn=032ca87cd2af6a08dfbbcc80b5c18005&amp;chksm=83a72916b4d0a000ff11876eb349baf47311670a2a6c37a003f9398ed2ecd1a47e209857f55b&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">程序员健康生活指南(五)-灵活的饮食方案</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTYwNTQxNQ==&amp;mid=2649558498&amp;idx=1&amp;sn=aa2ce31099b56d67eb0faf1a38ba6dd6&amp;chksm=83a7292ab4d0a03ce9ad519c0d596575b35e27785f5ad9650d265af418b45e7c70c30239e642&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">程序员健康生活指南(六) - 预防头痛和眼部疲劳</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTYwNTQxNQ==&amp;mid=2649558518&amp;idx=1&amp;sn=d4c26f0d5747aaf80cd6aa98df19bceb&amp;chksm=83a7293eb4d0a0286f08d3010e9de04932b0d3bd304bfffd1b17dc6702f0d7261d63100e8ba2&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">程序员健康生活指南(七) - 预防背部疼痛</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTYwNTQxNQ==&amp;mid=2649558533&amp;idx=1&amp;sn=cc7e7473c219a3637b5d65473db1405f&amp;chksm=83a72acdb4d0a3db7a24567b4247125472ee96fe08a997da72897470adcbd104018cb8beb4c1&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">程序员健康生活指南(八) - 预防手腕疼痛</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTYwNTQxNQ==&amp;mid=2649558536&amp;idx=1&amp;sn=d47d48123f0e7b4a4737ef1714f634ab&amp;chksm=83a72ac0b4d0a3d682546d4f42f255645f40c354a3942709839e5c064ab8b6e67d02fe436e8b&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">程序员健康生活指南(九) - 让锻炼贴近生活</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTYwNTQxNQ==&amp;mid=2649558555&amp;idx=1&amp;sn=de859c13913f9b96248b060d270a6b46&amp;chksm=83a72ad3b4d0a3c5192627a06d186a82ab0602cf3f39d9cf36846e40a7fc40c367bc40956e2e&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">程序员健康生活指南(十) - 到户外来思考</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTYwNTQxNQ==&amp;mid=2649558574&amp;idx=1&amp;sn=ef4cd191f657b0025bd40077e838b5cc&amp;chksm=83a72ae6b4d0a3f0310b9b7c589cd9a86b34d0ce1ba5eea638fd99ba1b207171944e7c86a989&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">程序员健康生活指南(十一) - 重构健康</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTYwNTQxNQ==&amp;mid=2649558577&amp;idx=1&amp;sn=a3d1733759058d21160902622eb9466b&amp;chksm=83a72af9b4d0a3ef1c37720ec6e810697fc51f3ea0cd864fe388064626b832063a7c3726b8fd&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">程序员健康生活指南(十二) - 组起队来</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTYwNTQxNQ==&amp;mid=2649558580&amp;idx=1&amp;sn=12213b39e6f7c2c112a428411f5cae7b&amp;chksm=83a72afcb4d0a3ea9ba8d7ada82b4f99b46e18cbbac2dffb317c331cce78a8ce288e491923c5&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">程序员健康生活指南(十三) - 继续行动吧，健康的程序员</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;收录了《程序员健康生活指南》的中文翻译，给为码友可以关注下一。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxMTYwNTQxNQ==&amp;amp;mid=2649558473&amp;amp;idx=1&amp;amp;s
      
    
    </summary>
    
    
      <category term="健康" scheme="http://haoweiguang.me/tags/%E5%81%A5%E5%BA%B7/"/>
    
  </entry>
  
  <entry>
    <title>Naval：如何不靠运气致富</title>
    <link href="http://haoweiguang.me/2019/03/04/Naval%EF%BC%9A%E5%A6%82%E4%BD%95%E4%B8%8D%E9%9D%A0%E8%BF%90%E6%B0%94%E8%87%B4%E5%AF%8C/"/>
    <id>http://haoweiguang.me/2019/03/04/Naval：如何不靠运气致富/</id>
    <published>2019-03-04T07:23:07.000Z</published>
    <updated>2019-11-10T16:17:44.955Z</updated>
    
    <content type="html"><![CDATA[<p>How to Get Rich (without getting lucky)<br>如何变的富有，不需要任何的运气。</p><p>Seek wealth, not money or status. Wealth is having assets that earn while you sleep. Money is how we transfer time and wealth. Status is your place in the social hierarchy.<br>寻求财富，而不是金钱或身份。财富是指拥有产生睡后收入的资产。金钱是我们怎么调动时间和财富。身份是你在社会体系中的位置。</p><p>Understand that ethical wealth creation is possible. If you secretly despise wealth, it will elude you.<br>理解道德正确的创造财富是可能的。如果你秘密的鄙视财富，它会避开你。</p><p>Ignore people playing status games. They gain status by attacking people playing wealth creation games.<br>忽略那些做地位博弈的人。他们获得地位的方式是通过攻击做创造财富博弈的人。</p><p>You’re not going to get rich renting out your time. You must own equity - a piece of a business - to gain your financial freedom.<br>你不可能通过租赁你的时间变得富有，你需要拥有资产，一个生意的一部分，来获取你的财务自由。</p><p>You will get rich by giving society what it wants but does not yet know how to get. At scale.<br>你可以通过给于这个社会想要但还不知道如何得到的东西去变得富有。规模化的。</p><p>Pick an industry where you can play long term games with long term people.<br>选择一个行业，在这个行业里你可以和长期的人去玩长期的游戏。</p><p>The Internet has massively broadened the possible space of careers. Most people haven’t figured this out yet.<br>互联网极大的扩展了职业生涯的可能性，大部分人还没有意识到这件事。</p><p>Play iterated games. All the returns in life, whether in wealth, relationships, or knowledge, come from compound interest.<br>做重复博弈。一生中所有的回报，财富，关系，或者知识，都是来源于复利。</p><p>Pick business partners with high intelligence, energy, and, above all, integrity.<br>挑选商业合伙人的条件是，非常聪明，富有能量，最重要的是，正直。</p><p>Don’t partner with cynics and pessimists. Their beliefs are self-fulfilling.<br>不要和犬儒主义者和悲观主义者合伙。他们的信仰是自证（预言）。</p><p>Learn to sell. Learn to build. If you can do both, you will be unstoppable.<br>学习去销售事物，学习去建造事物。如若这两者都可以做，那么你将是不可阻挡的。</p><p>Arm yourself with specific knowledge, accountability, and leverage.<br>通过特种知识，负责，杠杆，来武装你自己。</p><p>Specific knowledge is knowledge that you cannot be trained for. If society can train you, it can train someone else, and replace you.<br>特种知识是无法通过培训获得的知识。如果社会可以培训你，那么也可以培训其他人，他们可以取代你。</p><p>Specific knowledge is found by pursuing your genuine curiosity and passion rather than whatever is hot right now.<br>特种知识是通过追寻你单纯的好奇与热情获得的，而不是去寻找当下什么地方最热。</p><p>Building specific knowledge will feel like play to you but will look like work to others.<br>建造特种知识的过程看上去是对他人的工作，实际上是对自己的索取。</p><p>When specific knowledge is taught, it’s through apprenticeships, not schools.<br>当特种知识被教授的时候，是通过学徒制的，而不是学校制的教育。</p><p>Specific knowledge is often highly technical or creative. It cannot be outsourced or automated.<br>特种知识通常有很高的技术性和创造性。它不能被外包或者自动化。</p><p>Embrace accountability, and take business risks under your own name. Society will reward you with responsibility, equity, and leverage.<br>拥抱负责，把商业风险放在自己的名下。社会将会奖赏你于责任，股份，杠杆。</p><p>The most accountable people have singular, public, and risky brands: Oprah, Trump, Kanye, Elon.<br>那些最负责的人拥有独一无二的，公开的，有风险的品牌。奥普拉，川普，坎耶，马斯克。</p><p>“Give me a lever long enough, and a place to stand, and I will move the earth.” - Archimedes<br>给我一个足够长的杠杆，和一个支点，我能够移动地球。- 阿基米德</p><p>Fortunes require leverage. Business leverage comes from capital, people, and products with no marginal cost of replication (code and media).<br>财富需要杠杆。商业杠杆来自于资本，人民，和那些没有边际复制成本的产品（媒体作品和程序）</p><p>Capital means money. To raise money, apply your specific knowledge, with accountability, and show resulting good judgment.<br>资本意味着金钱。想要募集金钱，应用你的特种知识，负责，并且展示发生的好的判断。</p><p>Labor means people working for you. It’s the oldest and most fought-over form of leverage. Labor leverage will impress your parents, but don’t waste your life chasing it.<br>人力意味人那些为你工作的人。这是最古老和斗争最激烈的杠杆形式。人力杠杆会给你的父母留下深刻印象，但是不要浪费一生去追逐它。</p><p>Capital and labor are permissioned leverage. Everyone is chasing capital, but someone has to give it to you. Everyone is trying to lead, but someone has to follow you.<br>资本和人力是需要许可的杠杠。每个人都在追逐资本，但是必须有人把它给你。每个人都想领头，但是必须有人跟随你。</p><p>Code and media are permissionless leverage. They’re the leverage behind the newly rich. You can create software and media that works for you while you sleep.<br>程序和媒体作品是无需许可的杠杠。它们是新富们背后的杠杆。你可创造出程序和媒体作品，（它们）在你睡觉时还为你工作。</p><p>An army of robots is freely available - it’s just packed in data centers for heat and space efficiency. Use it.<br>一只机器人军队可以被自由使用 - 只是为了散热和空间效率被打包放置在数据中心。使用它。</p><p>If you can’t code, write books and blogs, record videos and podcasts.<br>如果你不会编程，那就写书和写博客，录制视频和播客。</p><p>Leverage is a force multiplier for your judgement.<br>杠杆是你的判断的力量倍增器。</p><p>Judgement requires experience, but can be built faster by learning foundational skills.<br>判断需要经验，但是判断能力的构建可以通过学习基础技能的加速。</p><p>There is no skill called “business.” Avoid business magazines and business classes.<br>没有一种技能叫做商业。避免商业杂志和商业课程。</p><p>Study microeconomics, game theory, psychology, persuasion, ethics, mathematics, and computers.<br>学习微观经济学，博弈论，心理学，说服力，伦理学，数学，和计算机。</p><p>Reading is faster than listening. Doing is faster than watching.<br>阅读比听更快，做比看更快。</p><p>You should be too busy to “do coffee,” while still keeping an uncluttered calendar.<br>你应该保持日程的干净，但是应该足够忙碌而没时间去做很多会面。</p><p>Set and enforce an aspirational personal hourly rate. If fixing a problem will save less than your hourly rate, ignore it. If outsourcing a task will cost less than your hourly rate, outsource it.<br>给自己设置并执行一个有抱负的时薪。如果修复一个问题节省费用比时薪少，忽略它。如果外包任务比你的时薪便宜，外包它。</p><p>Work as hard as you can. Even though who you work with and what you work on are more important than how hard you work.<br>尽最大可能的努力工作。尽管和谁一起工作，在哪件事上工作比努力工作重要许多。</p><p>Become the best in the world at what you do. Keep redefining what you do until this is true.<br>在你所做的事情上成为世界上最好的。不停的重新定义你的工作直到成真。</p><p>There are no get rich quick schemes. That’s just someone else getting rich off you.<br>不会有快速致富的体系。只是有一些想从你身上发财的人。</p><p>Apply specific knowledge, with leverage, and eventually you will get what you deserve.<br>加杠杠应用特种知识，最终你会得到你想要的。</p><p>When you’re finally wealthy, you’ll realize that it wasn’t what you were seeking in the first place. But that’s for another day.<br>当你最终获取了财富，你会意识到这并不是你最开始想寻找的东西。但是这是日后再说的事情。</p><p>Summary: Productize Yourself.<br>最后，Naval提供了一句话的总结 —— “总结：把你自己产品化”。</p><p>原文：</p><ul><li><a href="https://twitter.com/naval/status/1002103360646823936" target="_blank" rel="noopener">https://twitter.com/naval/status/1002103360646823936</a>  </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;How to Get Rich (without getting lucky)&lt;br&gt;如何变的富有，不需要任何的运气。&lt;/p&gt;
&lt;p&gt;Seek wealth, not money or status. Wealth is having assets that earn wh
      
    
    </summary>
    
      <category term="财富投资" scheme="http://haoweiguang.me/categories/%E8%B4%A2%E5%AF%8C%E6%8A%95%E8%B5%84/"/>
    
    
      <category term="Naval" scheme="http://haoweiguang.me/tags/Naval/"/>
    
  </entry>
  
  <entry>
    <title>徐远《人地城》读书笔记</title>
    <link href="http://haoweiguang.me/2019/02/21/%E5%BE%90%E8%BF%9C%E3%80%8A%E4%BA%BA%E5%9C%B0%E5%9F%8E%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://haoweiguang.me/2019/02/21/徐远《人地城》读书笔记/</id>
    <published>2019-02-21T08:10:06.000Z</published>
    <updated>2019-11-11T08:11:29.676Z</updated>
    
    <content type="html"><![CDATA[<h3 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h3><p>占用了那么多耕地，也没听谁说我们的粮食不够吃，储粮的仓库都是满的。【问号脸？？？】</p><p>他父亲的一句话：“人都走了，种地都机械化了，还是住城里吧”【趋势不可阻挡】</p><h3 id="第一篇：城市的起源"><a href="#第一篇：城市的起源" class="headerlink" title="第一篇：城市的起源"></a>第一篇：城市的起源</h3><h4 id="新石器是“容器”"><a href="#新石器是“容器”" class="headerlink" title="新石器是“容器”"></a>新石器是“容器”</h4><p>吃不完的食物可以储存，对于古代人类而言，是个巨大的进步。储存成为可能后，人类的食物供应会更加充足和稳定，进一步的发展成为可能。</p><p>食物的供给能力，决定了人口能够达到的密度。只有人口密度达到一定的水平，分工才会出现，高度的聚居才成为可能。</p><p>充足的食物让人类慢慢定居下来，村庄出现并变大。</p><p>然后慢慢演化为城市。</p><p>城市出现的另一个基本前提，是运输技术的进步。动物的驯化，对于运输无疑是有帮助的。</p><h4 id="有容乃大"><a href="#有容乃大" class="headerlink" title="有容乃大"></a>有容乃大</h4><p>“金融”无非是今天与明天的交换。把今天的财富“储存”起来，换取明天更大（也可能更少）的财富。</p><p>乡村经济的一个基本特征，是“自给自足”，或者说是“封闭”。</p><h4 id="筑城以卫君，造郭以居民"><a href="#筑城以卫君，造郭以居民" class="headerlink" title="筑城以卫君，造郭以居民"></a>筑城以卫君，造郭以居民</h4><p>在城市兴起的过程中，王权是最初的主导因素，商业因素反而是其次。【在国外是不是也是这样？】</p><p>城市最重要的功能，是方便了人们的交流。</p><p>现在流行的马拉松赛事，来源于一场马拉松战役，42.193公里</p><p>文明的最早起源，是在离地中海东岸不远处的美索不达米亚平原，也就是如今的伊拉克、叙利亚一带</p><h4 id="历史上的城市化"><a href="#历史上的城市化" class="headerlink" title="历史上的城市化"></a>历史上的城市化</h4><p>南宋临安的人口更是达到250万。</p><p>明清时期，北京的人口也都在70万-80万的水平。</p><p>迁徙自由不仅为城市发展创造了空间，也极大促进了经济的繁荣。</p><p>今天的中国，有5亿左右的城市户籍人口。在未来5-10年，或者更长时间内，会有另外5亿甚至更多的人到城市定居。【趋势啊！！！不知道未来聚居方式会怎样？】</p><h4 id="何为城？何为乡？"><a href="#何为城？何为乡？" class="headerlink" title="何为城？何为乡？"></a>何为城？何为乡？</h4><p>人类进步的源动力：交流和合作。【人类还是往总体最优的方式发展，哪种方式更利于发展就会留下来，像城市化、城市集群化必然是发展方向】</p><p>农业的基础是光合作用，需要在大面积的土地上铺开，而且考虑到交通的因素，农村和耕地不能太远，要交叉分布，因此传统乡村的人口密度不能太大。</p><h3 id="第二篇-城市印象"><a href="#第二篇-城市印象" class="headerlink" title="第二篇 城市印象"></a>第二篇 城市印象</h3><h4 id="东京印象"><a href="#东京印象" class="headerlink" title="东京印象"></a>东京印象</h4><p>日本地形多山，耕地很少，资源贫瘠，只要精耕细作，才能生存。做事马虎的懒汉，在这里很难生存的。久而久之，就形成了精益求精的工匠文化。【原来工匠文化是这样来的，环境决定文化，比如四川独特的享乐文化】</p><p>大东京地区有3600万人口，超过日本总人口的1/4。尽管日本人口在减少，这里的人口却依然在增加。据说东京为了疏散人口而修了很多地铁和卫星城，结果人口不但没有疏散，反而更聚集到这里。【中国大概率也会走上这条路，之前都是受政策的影响，鼓励小城镇的发展，现在发现大都市、大都市圈才是正途】</p><p>人类从丛林走向村庄再走向都市，无一不是以蒸腾的欲望作为驱动力。</p><h4 id="深圳印象"><a href="#深圳印象" class="headerlink" title="深圳印象"></a>深圳印象</h4><p>每到一个地方，都会写一点对当地的印象，有点到此一游的意思。【好想法，可以模仿】</p><p>改革开放迄今的成就，说白了就是两句话。<br>一句话是农村改革打了更多的粮食，解决了吃饭问题；<br>另一句是农业发展释放的劳动力进城，和城市人口一起推动了工业化。</p><p>真正意义上的城市化，是人口在城市里聚集、居住、工作、生活、思想，形成内生的时长需求。真正意义上的城市化，或许才刚刚开始。</p><p>歧视外地，几乎每个大城市都会，但是北京会好一些。为啥呢？因为是天子脚下，能人异士向来往这里聚集，已经好几百年了。京城的子民们，多少习惯了这一点了。</p><h4 id="台北印象"><a href="#台北印象" class="headerlink" title="台北印象"></a>台北印象</h4><p>人类的大部分精力，其实没有用来生产或娱乐，而是消耗在猜忌、争斗之中，这才是这个物种最大的悲哀。【哎！！！】</p><h3 id="第三篇-城乡二元"><a href="#第三篇-城乡二元" class="headerlink" title="第三篇 城乡二元"></a>第三篇 城乡二元</h3><h4 id="征地冲突的根源：农村土地产权太弱"><a href="#征地冲突的根源：农村土地产权太弱" class="headerlink" title="征地冲突的根源：农村土地产权太弱"></a>征地冲突的根源：农村土地产权太弱</h4><p>农地与市场无关，也就无法充分分享经济增长、收入增加的好处了，这是这些年来农村相对落后的根源。</p><p>产权的缺失，是农村落后的根源。</p><h4 id="历史的节点：1998年《土地管理法》修订"><a href="#历史的节点：1998年《土地管理法》修订" class="headerlink" title="历史的节点：1998年《土地管理法》修订"></a>历史的节点：1998年《土地管理法》修订</h4><p>农村集体土地是不能直接参与非农建设的</p><p>1998年的这一次修法，最重要的后果之一，就是政府垄断了城市化的供地。农村集体土地要参与城市化建设，首先要征为城市国有土地。</p><h4 id="是“农村集体所有”，还是“农村集体代耕”？"><a href="#是“农村集体所有”，还是“农村集体代耕”？" class="headerlink" title="是“农村集体所有”，还是“农村集体代耕”？"></a>是“农村集体所有”，还是“农村集体代耕”？</h4><p>有了一个分割的城乡“二元”，就有了一个套利的机会。这通道最好是唯一的、垄断的，这样就可以大赚其钱了。“征地”就是这样一个通道。</p><p>我们的城乡二元体制，对农村的歧视是全方位的，不仅歧视农村的居民，还歧视农村的土地。</p><p>进一步的经济发展，要求释放更多的人的更大的积极性和创造力，包括农民的积极性和创造力。</p><h4 id="崽卖爷田不心疼–“代耕”制度下的土地城市化"><a href="#崽卖爷田不心疼–“代耕”制度下的土地城市化" class="headerlink" title="崽卖爷田不心疼–“代耕”制度下的土地城市化"></a>崽卖爷田不心疼–“代耕”制度下的土地城市化</h4><p>1998年以来经济的告诉增长，跟两件事情密切相关：一是1998年房改，二是2001年加入WTO</p><p>我国耕地面积大约20.3亿亩，18亿亩耕地红线。</p><p>2004-2012年我国共征收土地大约5200万亩。2004年我国城镇建设用地总量也就5000万亩左右。城市直接翻倍。</p><p>从1998-2012年，我国地级市以上城市建成区面积增加125%，也就是翻了一倍还要多。相比较之下，地级以上城市户籍人口只增加了45%，两者的增速查了将近三倍。加上非户籍人口，人口也才增加了71%。【错配严重，为啥，未来人口增速会不会上来？】</p><p>北京二环、三环、四环、五环、六环的长度分别为33公里、48公里、65公里、99公里、192公里，环内面积分别为60平方公里、150平方公里、300平方公里、750平方公里、2500平方公里。2000年以三环为北京城的边界，现在（2015）以五环作为城市边界。15年间面积的扩张，不是一倍，而是5倍了。而北京的人口的增加，也就一倍多，不到两倍。</p><p>深圳全境面积1900多平方公里，已经开发了900多平方公里，开发强度接近50%，剩下的基本都是生态保护区。也就是说深圳的建设用地已经使用殆尽了【深圳房价还得涨啊】</p><p>征地是挣钱的买卖，花一个农用地的成本价把地征了，转手用市场价卖给开发商或者企业，中间差价就是地方政府的了。<strong>全国平均综合地价3069元每平方米，折合每亩204万元。而农用地的补偿成本仅为不到4万元一亩，有的甚至更低，中间相差50倍以上</strong>。也因此各地政府都喜欢建新城，成本足够低。建筑成本一平米也就几百元，少的四五百，多的上千元，加上配套也就几千元。</p><h4 id="谁动了18亿亩唐僧肉？"><a href="#谁动了18亿亩唐僧肉？" class="headerlink" title="谁动了18亿亩唐僧肉？"></a>谁动了18亿亩唐僧肉？</h4><p>全国农村居民住用地高达2.5亿亩。农村每7亩耕地对应1亩的农村居住用地。城镇用地仅仅为5100万亩。倘若农村的人均占地和城市一样，就可以凭空节约出2亿亩土地。【我认为国家早晚要动这块的脑筋】</p><p>世界范围内，农场大多是家庭经营，农业工人数量不多，大多只是作为临时性帮手。农业生产非标准化的东西太多，监督比较困难。经营农业，农场主自己很多时候可能要身体力行，充当主要的劳动力。这就导致大部分不会从事这个工作。<br>算一笔账，简单说，一亩地一年纯利润800元，1000亩地一年纯利润80万元。那么，投资回报率多少呢？买1000亩地需要3000多万元，外加各种机械、化肥、种子、人工以及日常运营的开销，总要有5000万的投入。80万/5000万，净资产回报率1.6%。【太低了，比放到银行还低】</p><p>第二次世界大战以来世界粮食价格一直有一个下降的趋势，意味着农业的价值也是慢慢下降的。到现在大概下降了差不多一半。究其原因，就是农业技术越进步，粮食变得越来越不紧张。【技术进步带来耕地的价值不断下降】</p><p><strong>城市里的地产，那是城市的聚集效应带来的高额地租。</strong></p><h3 id="第四篇-不堪重负的土地"><a href="#第四篇-不堪重负的土地" class="headerlink" title="第四篇 不堪重负的土地"></a>第四篇 不堪重负的土地</h3><p>还有其他用途的土地，在有需要、条件许可、经济上合理的情况下，是可以转化为耕地的。</p><p>假设需要的时候，81亿亩的林地、耕地可以有3%转为耕地（2.4亿亩），1.2亿其他农用地节约出1/4（3000万亩），农村宅基地节约出1.5亿亩，总数就是4.2亿亩，相当于增加了20%多的耕地。看这个数，或许会缓解部分人对于粮食安全的过度担忧。</p><h3 id="第六章-“剩余”的人"><a href="#第六章-“剩余”的人" class="headerlink" title="第六章 “剩余”的人"></a>第六章 “剩余”的人</h3><p>【大事情：农民进城】，在就业、养老、子女教育、医疗等各方面减少歧视。</p><p>城市是节约使用资源的手段。<strong>人群的聚集，极大地节约了交流和交换的通信、交通、运输、仓储等各方面的成本，促进了交换和劳动分工的发展，推动了科技进步，从而促进了经济增长，这是200多年经济学的精髓。</strong></p><p>城市面临的问题正指出了城市的瓶颈，提供了城市进一步发展建设的动力方向</p><p>解决“城市承载力”问题后，这些城市吸引了更多的人和更多的资源，并成为世界政治、经济、文化生活的中心，为人们提供着极大的便利，享受高额的地租；建设这样的城市，才是我们应该努力的方向。【中国政府一直担心大城市病，抑制超级城市的诞生】</p><p>60%是快速城市化的一个槛，过了这个数字，城市化的进城会放慢【中国18年达到这个临界点】</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h3&gt;&lt;p&gt;占用了那么多耕地，也没听谁说我们的粮食不够吃，储粮的仓库都是满的。【问号脸？？？】&lt;/p&gt;
&lt;p&gt;他父亲的一句话：“人都走了，种地都机械化了
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://haoweiguang.me/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="城市化" scheme="http://haoweiguang.me/tags/%E5%9F%8E%E5%B8%82%E5%8C%96/"/>
    
      <category term="房产投资" scheme="http://haoweiguang.me/tags/%E6%88%BF%E4%BA%A7%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title>产品经理应具备的能力（读张小龙有感）</title>
    <link href="http://haoweiguang.me/2018/10/16/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%BA%94%E5%85%B7%E5%A4%87%E7%9A%84%E8%83%BD%E5%8A%9B%EF%BC%88%E8%AF%BB%E5%BC%A0%E5%B0%8F%E9%BE%99%E6%9C%89%E6%84%9F%EF%BC%89/"/>
    <id>http://haoweiguang.me/2018/10/16/产品经理应具备的能力（读张小龙有感）/</id>
    <published>2018-10-16T10:38:11.000Z</published>
    <updated>2019-10-29T05:21:29.161Z</updated>
    
    <content type="html"><![CDATA[<p>最近在读有关张小龙的材料，觉着最真实、最有价值的还数龙哥在还未封神之前饭否的言论啦。花了好几天，断断续续的读完，泪流满面啊，龙哥牛逼，研究产品都搞到哲学、人性层面了，但感觉自己能吸收的东西了了。那就先写下自己当前的想法，另记下认为比较经典的话，以后可以常来翻一翻，常看常新吧。</p><blockquote><p>产品人是站在上帝身边的人</p></blockquote><p>产品经理看到这句，心里肯定会乐开了花，但权利越大，责任越大啊。龙哥为啥这样说呢，一是来奉承产品经理，二是产品经理确实是洞悉人性，满足用户欲望，设计规则，并让产品和人群按照规则演化的主，想想是不是有点像上帝。</p><blockquote><p>所以我后来发现,人不是培养出来的,是给他们土壤,然后,有才能的人自己会成长起来的。甚至不需要我分享什么。后来我就不培养人了,只观察人了。 </p></blockquote><p>优秀的人，有了土壤，自己就会长起来，其他职业也是。</p><blockquote><p> 如果工作不是被好奇心驱动,不如回家卖红薯。</p><p> 做产品,最要紧是保持十年如一日的新鲜感。</p><p>好奇心和发现是最值得珍惜的品德。</p></blockquote><p>好奇心很重要，这是人最原始的东西，也最能持久。</p><blockquote><p> 以后招产品经理,直接给他一个小电器,比如mp3播放器,让他写个产品使用手册,就知道行不行了。</p><p> 要提防那些Blog写得好的产品经理,因为在Blog上花的时间越多,在产品上花的时间就越少。原来还以为有例外,现在看起来无一例外。</p></blockquote><p>咳咳，Fenng老师，你怎么看？</p><blockquote><p> 做产品,就是跟用户谈一场恋爱,否则只是一场商业交易而已。产品人是多么的博爱啊。</p><p> 面试产品经理,所有技能合格后,要问,你喜欢摇滚吗。回答否的,就算了。</p><p> 我在生活上不是一个有洁癖的人,但对待产品却分毫必究,介大概就是传说中的精神分裂吧。</p><p> 很多人看到MJ的海报说pm心中有爱。不是爱,是愤怒。</p></blockquote><p>产品不应该仅仅是功能（需求）的堆砌，应该还要有“温度”，可能包含了产品经理的价值观、爱、愤怒或者其他，那样才有灵魂。</p><blockquote><p> 老乔是Intel的葛洛夫的唯有偏执狂才能生存的证明人。 偏执需要权力的辅佐才能进行到底。</p></blockquote><p>我还是想活的久一点，当个普通人也未尝不可吧。就像龙哥说的“ think less,live more（想得少，活得更久）”。</p><blockquote><p>要知道用户的心理，并且知道用一个什么样的规则去引导他。为什么这么说呢？规则是很简单的，只有简单的规则才可以演化出一个非常复杂的事件出来。所以我经常很不认同说，在很多做产品里面，一开始就做一个复杂的规则出来，最后没有任何演化的空间。……像Twitter之类的产品都非常简单，……，但是这样的东西是最有生命力的。</p><p>我们要做的工作是在群体里面做一个加速器、催化剂，是做这一类的工作，而不是把这一块钉死了之后，用户进来以后，只能怎么样，一步一步的走。</p></blockquote><p>设计出简单规则的能力</p><blockquote><p>让用户保持饥饿，让他们保持愚蠢。…….对我们的用户来说，我们是要想办法让他们知道他们的饥渴在哪里。</p><p>我们要满足他们的贪嗔痴。贪是贪婪，嗔是嫉妒，痴是执着。</p><p>那我们要洞察这一点，是因为我们的产品对用户产生黏性，就是让用户对你的产品产生贪，产生嗔，产生痴。</p><p>我们给大家各种钻，钻体现了什么心理？其实都体现了人性的这几个弱点，各种黄钻、绿钻，他会贪，他要升级；他会嗔，他会跟人比较，说你的钻比我的等级高，所以我也要升上去；他会痴，觉得我一定要把所有的钻给收齐。……就像苹果的手机，它同样的会对用户产生这样的吸引力……这是人性本身的一个共同的弱点</p><p>所以当我们在做一个产品的时候，我们在研究人性，而不是说在研究一个产品的逻辑。</p><p>所有的产品都需要有人性的研究。……..你可以对每一个好的产品都提出来问题，那么它背后肯定都是从人性的角度来说的，而不是从别的理由来说的。</p></blockquote><p>深刻的理解人性</p><blockquote><p>我们做产品要找到用户心理诉求的本质。……用户上微博干什么？<strong>用户上微博的原因是为了炫耀，是因为害怕孤独，不是利群而离群，是用它有追感。</strong>……<strong>实际上微博是一个构筑另一个自我的地方，构筑一个自我。</strong>…….一个内心强大的人是不需要写微博的。</p><p>功能是做需求，定位是做一种心理诉求，也就是说定位是更底层的一些心理供给。</p><p>让他<strong>获得安慰感、排除孤独感，让他获得成就感，让他在里面更加的自信</strong>，让他在里面像一个敌人一样的，要做到这些诉求。</p></blockquote><p>善于抓住用户心理诉求的本质，挖掘到底层的需求</p><blockquote><p>我们引用老乔的一句话，产品是技术和艺术的结合，或者产品是技术和人文的结合…..但是你怎么样在你的产品里面去包含这种人文或者艺术的成分？这是挺不容易的。</p><p>对于一个产品经理来说，需要提高自身修养的一个方向，在技术之外的人文方面有一些自己的认识</p><p>其实产品是可以表达产品经理自己情感的地方，如果大家用得好的话。……所以你看如果你把你个人的情感包含到产品里面，是一件很爽的事情。</p></blockquote><p>除了技术之外也需要提升自己的人文修养</p><blockquote><p><strong>所以有的时候，我们的产品经理经常是在做坏事，不是做好事，因为他拼命的引入新的功能进来，后面反正又不用自己写代码就不管，然后就把开发的累死了。</strong>……因为我们要冒出一个想法来，太容易了；但是我们要知道这个东西是一个正确的想法，就太难了。</p></blockquote><p>控制需求的能力</p><blockquote><p>其实研究客户心理就是研究自我，很多时候我们是瞄准自我的需求来做产品的。……当我们研究不到用户需求时，我们就会说只要让我们自己用得爽…..怎么样让用户用得爽呢？……一个比较简单的方法，把自己当作一个傻瓜来用产品，傻瓜心态。……他没有这么多的背景，他们用这个东西只是第一眼的感觉或者用一次，一、两分钟的体验就决定了。</p></blockquote><p>把自己当傻瓜用产品，傻瓜心态，一秒变傻瓜的能力</p><blockquote><p>使他（用户）感受趋势才是最重要的，因为用户只能够对过去的事情产生认知，未来的东西才是趋势，你怎么<strong>知道下一阶段会流行什么样的潮流，那才是最重要的</strong>。我们怎么去了解这个趋势是什么？有很多方法，很多人去分析数据【分析数据也有弊端，举了修理飞机的例子】</p><p>感知趋势是来自于我们的各种渠道，包括生活中的各种渠道，或者微博上的各种渠道。我自己的个人喜好我会看一些论坛或者微博这样的东西，去看这些离我很远的用户，他们在什么样的氛围、什么样的场景里面去用我们的产品。</p><p>坚持一个习惯，以前提过1000、100、10这样的习惯，就是说每周要去看1000个帖子，不管是微博的，还是哪里的。要看100天博客，要做10个CE这样子的。</p><p>之前就有一句话说web已经死掉了，大概从移动互联网的发展趋势来说，确实是有这个趋势。…..因为PC的不增长和手机的快速增长，这个对比实在是太强烈了。……而手机端的话，浏览器可能不是一个主要的入口，可能APP才是。</p><p>而且APP的趋势，不是要做一个大而全的APP，而是说做成尽可能小的APP。为什么不是大而全的呢？因为用户很懒，我要看天气，我就点天气的APP。我要看股票，就点股票的APP。我不会跑到腾讯所有服务的APP里面去，然后钻到里面去找天气、找股票。</p></blockquote><p>感知趋势的能力</p><blockquote><p>用户要什么我们就给什么，这个在很高层的用户里面甚至也会出现这个问题。比如说你的上级可能会给你说，你看用户给你提出这个需求了，你为什么不做？……为什么不做？因为我们觉得不能用户要什么就给他什么，要变个花样给他，用户要的不一定是对的。…..所以这种需求挺多的，但是我想表达的是如果我们针对需求一个人去满足，你可能获取了这部分用户，但是得罪了另外一部分用户。</p></blockquote><p>把控需求的能力，不要人云亦云，要有自己的思考</p><blockquote><p>但产品也是，一个产品里面很简单的一个产品可能也包含了上百个功能在里面，这些功能你可以像写代码一样的，你可以按一个线性的方式把它串起来，但是也可以做成一个很有架构在里面的东西。…….我们心中一定要有一个产品的架构在这里，而不是说我们这个产品就是一大堆功能的集合，只是一个无序的集合那样就很糟糕了。</p></blockquote><p>产品架构的能力，产品不仅仅是功能的堆砌</p><blockquote><p>一个产品技能的心态，这也是我感触比较深的，就是跟人讨论问题的时候会争论起来。<strong>对产品性能来说我觉得它是抱着一种求知的态度来讨论</strong>，而不是争论谁赢了谁输了这样一个观点。如果是这种求知的话，当别人说服了你，辩赢了你，那你很高兴，因为你接触到了新的知识。应该是说很鼓励这种辩驳，但不是为了自尊心而战。</p></blockquote><p>抱着求知的心态看待和讨论产品</p><blockquote><p>作为产品经理来说，一方面是自身要保持饥渴，保持一个觉得自己很无知的状态。</p><p>最后说的就是——我所说的都是错的。</p></blockquote><p>总结一下</p><ol><li><p>拥有好奇心，洞悉人性，善于抓住用户心理诉求的本质，挖掘到底层的需求</p></li><li><p>基于用户体验的产品思路，打造有“温度”、有“骨架”、有“灵魂”（PM的爱恨情仇）产品的能力</p></li><li><p>感知趋势的能力</p></li><li><p>设计出简单规则的能力</p></li><li><p>变傻瓜用户的能力</p></li></ol><p>   怎么具备以上能力呢，除了技术之外也需要提升自己的人文修养。多看书，多做产品。</p><p>产品不应该是冰冷的工具，乔老爷子如是说：“产品是技术和艺术的结合，或者产品是技术和人文的结合”。</p><h3 id="Revision-history"><a href="#Revision-history" class="headerlink" title="Revision history"></a>Revision history</h3><p>2019.10.26 读张小龙2012产品公开课总结<br>2019.10.16 读张小龙饭否后的总结</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在读有关张小龙的材料，觉着最真实、最有价值的还数龙哥在还未封神之前饭否的言论啦。花了好几天，断断续续的读完，泪流满面啊，龙哥牛逼，研究产品都搞到哲学、人性层面了，但感觉自己能吸收的东西了了。那就先写下自己当前的想法，另记下认为比较经典的话，以后可以常来翻一翻，常看常新吧
      
    
    </summary>
    
      <category term="产品设计" scheme="http://haoweiguang.me/categories/%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="张小龙" scheme="http://haoweiguang.me/tags/%E5%BC%A0%E5%B0%8F%E9%BE%99/"/>
    
      <category term="产品经理" scheme="http://haoweiguang.me/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>张小龙饭否摘抄</title>
    <link href="http://haoweiguang.me/2018/10/16/%E5%BC%A0%E5%B0%8F%E9%BE%99%E9%A5%AD%E5%90%A6%E6%91%98%E6%8A%84/"/>
    <id>http://haoweiguang.me/2018/10/16/张小龙饭否摘抄/</id>
    <published>2018-10-16T06:11:52.000Z</published>
    <updated>2019-10-29T05:21:10.822Z</updated>
    
    <content type="html"><![CDATA[<p><strong>网络&amp;群体</strong></p><p>你的价值在于一个集体对你的认证,这是很多人具备的意识。然后这个意识再被sns网站利用,又增强了这个意识。 </p><p>物种多样性:一个物种并没有进化为全能生物,相反,只加强它独具的一个功能才能让它生存。 </p><p>动物会向中心聚集,处在边缘的动物会有被天敌吃掉的危险。成千上万人在一个时间段看和谈论一部最新的电影,也是同样的心理:不看的人会地处文化的边缘,隐性地影响交配权。 </p><p>将来每个人需要两个微博,一个是社交型微博,一个是自我表达型微博。 </p><p>社交网络,并不是好友越多越好。 </p><p>sns上,一下子给我100个好友,怎能给我一个一个去发现和找到好友的乐趣呢。 </p><p>社会是所大学,选修表演专业者众。 </p><p>陌生人组成的社区,虽然冰冷,但是去掉了熟人社区的温情和虚伪,多了规则。 </p><p>评论的意义:一个人如果自顾自写东西会写到离谱,评论相当于自动控制系统的负反馈,让人从偏激中收缩,趋于稳定。最终一个社区的个体互相影响,形成一个稳定的中庸的气场。 </p><p>人分熟人,半熟的人,陌生人。沟通方式有广播,群展示,群聊,单聊。排列组合是满足不到人们的需求的,因为基因的选择策略不是这么机械。重要的是,让人不自觉地掉进圈套,而不是让他建立圈子。 </p><p><strong>人性</strong></p><p>用手指同步自己的话到各个微博,原来是基于一种自我肯定和自我赞赏的快感,在paste的时候有机会欣赏到作品的复制和传播,这种快感源自基因的“复制和传播是第一目的”。任何自动同步工具都是扼杀这种快感的,因此会被基因排斥,这种同步产品注定失败。 </p><p>往往能够获胜的,不是真善美,而是贪嗔痴。因为后者更给力。 </p><p>你说的每一句话都是炫耀。因为,当你想说一句话的时候,你的意识里其实有1亿个念头在动,它们像精子一样争先恐后,最终,最炫的那个念头胜利了,成为了那句话,成为了冠军,获得了从你口里说出来的权力。 </p><p>方向盘是手的延伸,油门刹车是脚的延伸。汽车并不单是个运输工具, 而更像人工肢体。开车和坐车是不同的。对驾驶者来说,汽车是有生命的。 </p><p>手机是人的最重要的人工器官。 </p><p>手机是人的躯体的延伸,手机发博才是躯体对世界的回应,越来越感觉如此。 </p><p>人们等待一个平板电脑的发布,因为那是他们的第三支手第三只眼,所以,重量和分辨率是头等重要的。 </p><p>这么多年了,我还在做通讯工具,这让我相信一个宿命,每一个不善沟通的孩子都有强大的帮助别人沟通的内在力量。 </p><p>做自己的人又分两种,一种不断打破自己,一种沉溺于自己。 </p><p>人会集中注意力做一件事情,因为这样可以避免胡思乱想。这是一种基于生存本能的自我保护动作。 </p><p>人只是基因操作的一台机器,绝大部分的生存和选择策略,已经被写在基因的程序库里。人只是不自觉地听从这些基因制定的策略的指挥,却以为是自己的头脑做的选择。少数人可以挣脱并产生自己的选择策略 </p><p>基本人性需求,不应该压抑。谢安听说打破苻坚的军团之后,强行忍住了得瑟的冲动,结果把自己木屐的齿都折断了。谢安是宰相,折木屐。普通人的话,恐怕太压抑会折JJ的说。 </p><p>好战是人的天性,所以任何一个团队或者产品都要树立一个敌人来提振精神,哪怕没有敌人都要找一个假想敌。 </p><p>人就是环境。人就像变色龙,进入到环境就会去适应,最终成为那个环境的一部分。比如在微博上,环境就是听众,发表的言论自然就是适合粉丝听的言论。环境就是个天然的过滤器。 </p><p><strong>产品</strong></p><p>还是你们用户爽,哪里爽到哪里,苦的是做互联网的,要整天分析你们的阴暗心理好让你们更爽,还不能明说。 </p><p>一个产品,要加多少的功能,才能成为一个垃圾产品啊! </p><p>产品往往是做着做着,就主旋律了,因为跟着用户走,用户爱听主旋律的歌。 </p><p>虽然人人都说简单是美,但没有几个人真正喜欢简单的。看看这个越来越复杂的世界就知道了。 </p><p>产品就象一个生物,有它自然的进化之道。最重要的,是制定好产品的内在基因的“竞争策略”,让竞争策略在进化中再自行演化为具体的表现形态。如何搞?没想清楚。 </p><p>异议就象基因的突变,有突变才能滋生出更强的新一代基因。 </p><p>基因并不会思考,它们只是漫无目的的胡乱产生变异,有些碰巧更有利于生存,就存活下来了。 </p><p>如果说产品做的一切都在满足用户的虚荣,热闹,逃避,贪恋等,那么,大众同样都有受虐的心理,为什么不做一款产品去虐待他们? </p><p>平均每天收到一张iTunes Store的帐单。我要在apple上疯狂消费,来赎回以前在windows上狂用盗版的罪。【张小龙在app store体验了很多应用】 </p><p>twitter的创始人起先无所事事,就去钓鱼,看到鱼儿成群结队的拥挤,生怕掉队,于是得到启发,便开发了twitter,方便人们成群结队。 </p><p>网络尚未普及的时候,产品必须依靠功能多来取胜,并且产品是自成一体的。网络普及后,才催生出一种新的产品形态:产品极简,反而有利于在网络这个大生命体中自我繁衍,并且产品是面向连接的。</p><p>好的网络产品,必然是无法预料其会不会成功的。成功的产品,刚好是“碰巧”成功了。但这个碰巧并不是创造者的运气,而是,这个产品刚好能在网络生命体中生存和繁殖。就像我们无法知道一个小孩为什么成长如此迅速一样,我们无法知道一个网络产品为什么会成功,即使做的人,也应该感谢主。 </p><p>如果说一个细菌能够自然粘上另一个细菌是细菌的“意识”,一个极简的产品元素的能够连通另一个用户的接口,就是一种连接“意识”。那么这个接口就是有“意识”的。接口是主人,人是接口要使用的对象。 </p><p>一个被人预见必然会成功的产品,必然会是个失败的产品。成功的产品是不能预见的。至少,是不能被人所预见的。机器来预见还有可能。 </p><p>因为我们无从知道复杂生命体的运作规律。 </p><p>缘起,性空。 </p><p>互联网产品应该是由用户推动，而不是产品经理来推动。产品经理的作 用只是找到四两拨千斤的地方稍微用点力。 </p><p>流通正在取代内容本身,内容变得更小更方便传播。mp3取代唱片,微博取代书本,短信取代信件。我怀疑有一天,微小的内容也没有了,大家直接通过网络交换荷尔蒙。 </p><p>和“敌人比我们自己更了解我们”相对应的是,用户比我们自己更了解我们的产品。产品是有人用才成为有灵魂的产品,图纸和代码堆出来的只是躯壳。 </p><p>你问我们和竞争对手比有什么区别,我说我们没有他们那些臃肿艳俗的部分。 </p><p>FaWave这类工具,汇集了多个产品的数据和功能,看似提高效率,但人毕竟不只是效率工具,汇集类工具脱离了原产品的气息后,就丢失了对产品的情感认同。 </p><p>心有千千结,每种结都是一个产品。关系千万重,每种关系都是一个产品。未来世界,应该是每个人都会做一个十个用户的产品的时代。 </p><p>网站的发展趋势是,内容有标题的都不行了,没有标题的才兴起,如twitter,facebook。我现在好奇的是,quora的是有标题,还是没标题? </p><p>哥做的不是产品,哥做的是发挥潜力的自由。 </p><p>IM是没有前景的,因为破坏了“让人更轻松互连”的定律。IM可能需要尽快将双向关系转换到单向关注体系中。 </p><p>用户的忍耐力太强了,最后就不辩美丑了 </p><p>美女们是否爱用,是产品能否流行起来的风向标。特别是天上人间的。 </p><p>一晚上没睡着,想明白了一件事:单对单聊天是通讯工具,多人聊天是社区。 </p><p>手机开发,对体验的要求更高了,一寸短,一寸险。 </p><p>以后招产品经理,直接给他一个小电器,比如mp3播放器,让他写个产品使用手册,就知道行不行了。 </p><p>程序员当然不知道产品的走向,但产品人员就知道吗?也不知道。不同的是,程序员会盲目创造出100个尝试后,总有一个胜出并生存下来。生存的这个就是走向。 </p><p>facebook为什么在国外这么火?因为他们的生活是在是太单调了。 </p><p>产品总是会包含功能之外的价值观的。因此不能指望天朝设计的产品能被世界认同。 </p><p>哥喜欢的不是产品,是战争。 </p><p>互联网产品,好友是如何来的?必须是用户自己手把手拉来的。任何的批量好友导入,都是收效不大的。 </p><p>原来产品的气质,无非是说做产品要带些文艺。 </p><p>互联网的最终目的,是让关系学见鬼去。 </p><p>产品人是站在上帝身边的人 </p><p>think less,live more </p><p>信息越透明,整合的作用就越小。不在单点突破,而希望依靠整合来成事,是老套路了。所以N合一的东西一般很垃圾。网络的使命,包含了取缔整合。整合是系统来自然演绎的,不应该是人干的事。 </p><p>做产品,最要紧是保持十年如一日的新鲜感。 </p><p>怎么能跟战略部的人谈产品呢,他们面对的是评论家,我们面对用户。 </p><p>周国平说,即使产品是个悲剧,我们也要做得有滋有味。即使用户都是傻逼,我们也要帮他们装得有声有色。 </p><p>深夜,突然悟到Jobs说的“Stay hungry , stay foolish”,原来本意是对用户说的,“让你们保持饥渴,让你们保持愚蠢”。 </p><p>要提防那些Blog写得好的产品经理,因为在Blog上花的时间越多,在产品上花的时间就越少。原来还以为有例外,现在看起来无一例外。 </p><p>告诉大家一个秘密,苹果为什么崇尚白色?崇尚一个按钮的设计?因为他们的首席设计师乔纳森之前搞工业设计是浴室用品领域。想想马桶吧。 </p><p>互联网的产品,哪怕任何一个非常小的产品,其实都想一场战争,一场瓜分资源的战争。用户就是待瓜分的资源。 </p><p>做产品,就是跟用户谈一场恋爱,否则只是一场商业交易而已。产品人是多么的博爱啊。 </p><p>面试产品经理,所有技能合格后,要问,你喜欢摇滚吗。回答否的,就算了。 </p><p>我在生活上不是一个有洁癖的人,但对待产品却分毫必究,介大概就是传说中的精神分裂吧。 </p><p>很多人看到MJ的海报说pm心中有爱。不是爱,是愤怒。 </p><p>从前的理论是,市场营销是炮弹,打炮才能带动销量。现在的情况是, 产品本身是炮弹,只要爆炸力强就能炸晕一片用户。 </p><p>Instapaper本来就是小众,走收费路线可以理解。whatsapp那才叫牛逼,大众软件依然收费。【小众软件可以收费】 </p><p>如果社会进步到没有商人了,生产的人直接赚钱,该是种进步吧。appstore所以好。 </p><p><strong>用户体验</strong></p><p>原研哉:设计是为了让人在高速的现代生活节奏中更轻松,而非更紧张。 </p><p>原研哉:古人需要复杂的物品装饰图案和式样来吓唬敌人和统治民众, 现代人不再需要装饰有这类作用,因此流行简约设计。我感觉我生活在古代,因为我也不能完全接受简约。 </p><p>检验你是否真的接受简约的方法是,把家里装修成现代简约风,如果你住上几个月没疯,就通过了。 </p><p>我们遵循一个很古老的设计原则:UI人员禁止使用同类产品,但PM必须博采众长,PM将需求转述给UI去设计。这样避免UI进入思维定势 </p><p>多任务,在windows上是alt tab,在iphone上是双击马桶按钮,在macO S上是四个指头往下一撸。原始的就是人性的。 </p><p>需要说明书的产品不是好产品。需要弹tip告知用户如何使用的功能不是好功能。 </p><p>每天都有很多产品发布或升级,介绍都是罗列功能指标。用户又不是按功能来付费的,你列那么多新功能去完成kpi没有问题,去糊弄用户就不对了。 </p><p>我不喜欢的UI例子:弹tip;半透明遮盖;页面上来一块固定toolbar;令人不解的数字;etc </p><p><strong>创新</strong></p><p>问:深泽直人,为什么无印良品要创新呢?答:战后日本刚开始也都是模仿,因为模仿就可以在市场立足了。但是后来用户逐渐不买模仿的帐了,自然,企业必须要创新才能生存了。所以,创新是用户逼的。 </p><p>关于创新：1,创新是无稽之谈。创新不是决定取舍的理由。创新一般都是空想。创新是靠不住的,死得很快的。2,要的,是把握用户心理。其结果,才被观察为创新。3,创新是件碰运气的事,你只是蝴蝶,剩下的交给云。ppt over。 </p><p>指望中国人比西方更创新,是不太靠谱的。创新是基于用户环境的,比如我们都还没有普及智能手机,自然不会催生出一个智能手机普及环境下的创新应用。 </p><p>大部分的所谓创新,都是把问题搞复杂化而已。 </p><p><strong>思维</strong></p><p>程序设计最近20年的发展,是引入了更“自然”的思维方法:万事万物有其“基本类型”,高级类型是从基本类型派生出来的,并呈多态性,高级的个体是高级类型的实例,个体之间是通过消息来通讯的。这就是C++的全貌,虽然很多C++程序员对此理解不深。我想说的是,这也是PM分析问题的法宝。 </p><p>思维习惯和思维方法,其实是可以训练出来的。那么,为什么大学没有做产品这门课呢? </p><p>词语只是金属表面散射出来的一点点光,虽然能汇集成为耀眼变换的光,却还只是变换的光。 </p><p>《黑天鹅》里总结得太好了:人有天生的归纳能力来将复杂事物模型化。但这也导致人的认知误区,没有见过黑天鹅就认为天鹅都是白的。 </p><p>《黑天鹅》让我知道我是如何被我的经验和直觉所愚弄了。 </p><p>成功是个概率事件,这些传记可以当故事看,但不能当推理看。 </p><p>勤奋只是一种长年形成的癖好。 </p><p>程序语言和自然语言一样,都是对想法的整理和表达。因此我现在面试程序员,不让他写程序做题了,改为聊天。 </p><p>无欲则刚,一欲则强,多欲则乱</p><p>Think Different!我经常用这句话来提醒自己,我没有乔老爷的才,一定不能因为要think different而走火入魔。 </p><p>好奇心和发现是最值得珍惜的品德。 </p><p><strong>其他一些思考</strong></p><p>这两年,我博览了群书和群山,路过了死亡之谷和罪恶之源,现在终于可以坐下来喘口粗气了。 </p><p>少用电脑多看书,多看电影少上网 </p><p>你看到一本说出你心里话的经验之谈的书,然后会很痛苦,因为这类书是于人无益的:能明白的,不看此书也自然会明白。不明白的,看了此书也不会有改变。 </p><p>所以我后来发现,人不是培养出来的,是给他们土壤,然后,有才能的人自己会成长起来的。甚至不需要我分享什么。后来我就不培养人了,只观察人了。 </p><p>一个热衷于打勾的国度。源自对盖印的崇拜。盖印又源自宝塔葱白。 </p><p>古时候,男人出去打猎,是没有计划的,遇到什么打什么,也可能空手而回。今天的男人每天规定必须要打几只狼回来,就焦虑了。 </p><p>原来光有好的想法没用,还要有渠道才能传播出去。问题是,渠道反过来又会选择性传播和放大不该传播的。 </p><p>想法如同基因,有生存价值的想法最终会取得传播的胜利。这是《自私的基因》里关于文化基因的观点。 </p><p>整天将KPI挂在嘴上,以KPI为目标来工作的leader,都是不合格的,庸俗的,没有想法的,令人痛苦的,无法言语的。 </p><p>转:“人们往往出于责任做慈善,但事实是,做慈善有益于自己的身心, 有助于自己了解生活。我从难民身上学到了最多东西,比如如何当母亲、做一个坚强的人并生存下去,所以我只是希望能回报一些东西。”– 安吉丽娜朱莉 </p><p>我们总说每个人都是独一无二的,但同时又要求每个人都有一样的能力,因为不能提供给每个人独一无二的职业。 </p><p>人多了做事情就痛苦。哥的理想是,以后一个人弄一个很大面积的办公室,养花种草写程序,一个人做,爱怎么搞怎么搞。 </p><p>马太效应揭示出,不光是人会往人多的地方走,就连金钱都是这样。 </p><p>太初,人太自由了,于是,要有约束,便有了节日。大大小小的节日。 </p><p>如果工作不是被好奇心驱动,不如回家卖红薯。 </p><p>在一个平庸的人群里,需要有人独断专行 </p><p>转:人生的成长过程之中,要是不彻底的绝望一次,就不知道自己身上什么东西,决不可放弃,也就不知道什么是真正的快乐。——吉本芭娜娜《厨房》 </p><p>如果不是有乔老爷这只黑天鹅,我差点就相信三十岁以上的人都已经属于被时代脉搏淘汰的人了。 </p><p>愚人节的真是含义是,让人自省一下自己其实是个愚人。这一天,每个人都应该戴个驴面具上街的。 </p><p>人一成功,就喜欢将归纳法当作推导出真理的方法。 </p><p>人要成功很难,比成功更难的是,知道自己的成功是偶然的。 </p><p>归纳法来推导结论是错误的。所以很多时候,比拼的是谁更能独断专行。不过独断专行也是依赖在历史经验的基础上归纳出来的思路。 </p><p>陪练要找高手。 </p><p>群体互联时代,靠个人或者中心影响力来做宣传,显得不合失宜。 </p><p>没有压力和压力过重,都会导致不可承受的轻。 </p><p>王阳明是个了不起的人。看他的著作,不如在实践中尝试无畏。 </p><p>为了证明人是环境的反应器,在自然环境中才会产生更多的想法,我做了个实验,用语音记事本记录了今天在路上的十分钟产生的想法,结果发现,路上的思维很活跃。 </p><p>与其说乔布斯的强大在于对市场,商业,管理的洞察,不如说是对人性的洞察。 </p><p>我相信将来会有一种随时随地的微博形态来取代现在的微博。因为人在环境中实时产生的反应才是丰富而有实感的,而坐在电脑前产生的反应,是对电脑里的虚拟思维做二次反应。 </p><p>如果不能做一些特别的事情,那做它有什么意义呢。 </p><p>上帝让众生平庸,是不想看到他们都变成精神病 </p><p>一个理想的人生应该这么过,四十岁前把所有的欲望满足一遍,四十岁后过没有欲望的生活 </p><p>幸福感不一定和财富成正比,却和无知度成正比。 </p><p>丹·艾瑞里在《怪诞行为学》中,用大量的历史案例与实践经验证明:在很多时候,不是消费者的购买意愿影响市场价格,而是市场价格影响了消费者的预期,进而影响购买。 </p><p>在这本书中,高汀断言,我们已经进入了一个消费者几乎已经拥有了所必需的一切、很难有东西能激起其消费欲望的后消费时代,传统的面向大众的产品定位和老的营销法则即将衰亡,在这个需求饱和的时代,一种产品想要卖得出去——遑论获取成功——必须是值得注意的、例外的、全新的、有趣的 </p><p>从前的理论是,市场营销是炮弹,打炮才能带动销量。现在的情况是, 产品本身是炮弹,只要爆炸力强就能炸晕一片用户。 </p><p>要么你让市场营销人员去前线大炮,费钱费精力。要么你直接让用户打炮,一劳永逸。 </p><p>老乔是Intel的葛洛夫的唯有偏执狂才能生存的证明人。 </p><p>偏执需要权力的辅佐才能进行到底。 </p><p>中国的教育是扼杀好奇心的完美历程。 </p><p>写文章,做网站,写代码,要求的能力都是一样的,就是条理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;网络&amp;amp;群体&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你的价值在于一个集体对你的认证,这是很多人具备的意识。然后这个意识再被sns网站利用,又增强了这个意识。 &lt;/p&gt;
&lt;p&gt;物种多样性:一个物种并没有进化为全能生物,相反,只加强它独具的一个功能才能让它生存。
      
    
    </summary>
    
      <category term="产品设计" scheme="http://haoweiguang.me/categories/%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="张小龙" scheme="http://haoweiguang.me/tags/%E5%BC%A0%E5%B0%8F%E9%BE%99/"/>
    
  </entry>
  
  <entry>
    <title>比特币的前世今生</title>
    <link href="http://haoweiguang.me/2018/06/25/bition-history/"/>
    <id>http://haoweiguang.me/2018/06/25/bition-history/</id>
    <published>2018-06-25T13:54:01.000Z</published>
    <updated>2019-11-01T05:58:37.370Z</updated>
    
    <content type="html"><![CDATA[<h3 id="比特币诞生的背景？"><a href="#比特币诞生的背景？" class="headerlink" title="比特币诞生的背景？"></a>比特币诞生的背景？</h3><p>2008年，金融危机，当时政府和银行管理经济的能力遭到各方质疑，信用降入谷底。美国政府向华尔街和底特律汽车公司注入大笔资金，美联储推出“量化宽松”政策，本质上就是大量印美钞刺激经济，金价上涨。相当于政府拿民众的钱来补贴这些资本家。</p><h3 id="为什么要创建加密电子货币？"><a href="#为什么要创建加密电子货币？" class="headerlink" title="为什么要创建加密电子货币？"></a>为什么要创建加密电子货币？</h3><p>其实一直有一帮自由主义者密码极客希望创建一种完全去中心化的电子现金系统。可以脱离政府自由流通和发展。</p><p>因为之前的信用卡或者货币都存在诸多问题。比如信用卡需要用户的真实身份，对于用户的隐私保护不够。货币就存在超发的情况，政府通过这种方式从民众手里掠夺财富。</p><h3 id="加密电子货币的坎坷之路"><a href="#加密电子货币的坎坷之路" class="headerlink" title="加密电子货币的坎坷之路"></a>加密电子货币的坎坷之路</h3><p>1983年大卫·乔姆（David Chaum）最早提出把加密技术运用于现金上的想法。写了论文《不可被追踪的交易》，使用盲签（blind signature）的技术来实现匿名的网络支付系统。1989年大卫·乔姆创建了数字现金公司；在之前系统基础上创建了电子现金（Ecash）系统，这个系统还有一个别名为网络现金（cyberbucks）系统。得到了微软和visa等巨头的支持。但是因为理念太超前，未得到大范围的支持，另外，该系统支持企业对企业转账也是其失败的原因。</p><p>1998年，戴伟（Wei Dai）阐述了一种匿名的、分布式的电子现金系统：b-money。B.money强调点对点的交易和不可更改的交易记录。每个交易者都保持对交易追踪的权力。但是B.money系统中，大卫并没有解决账本同步的问题。</p><p>1998年，尼克·萨博（Nick Szabo）发明了比特黄金（BitGold），提出了工作量证明机制。</p><p>哈尔·芬尼（Hal Finney）发明了哈希现金（HashCash）则把该机制进一步完善为一种”可重复<br>利用的工作量证明（RPOW）“。“RPOW”的特色在于可重复使用，且虽然控管权集中，但发行者没有通胀压力。</p><p>2008年10月31日，名不见经传的中本聪在metzdowd.com的密码学邮件组列表中发表了比特币白皮书《Bitcoin: A Peer-to-Peer Electronic Cash System》（《比特币：一种点对点的现金支付系统》)。</p><p>2009年1月3日，比特币网络诞生，中本聪本人发布了开源的第一版比特币客户端。</p><p>2009年1月3日，比特币网络的第一个区块诞生了。<br><img src="http://images.insuncle.com/15301134448308.jpg" alt></p><p>2009年1月9日，中本聪本人发布了开源的0.1版比特币客户端。<br><img src="http://images.insuncle.com/15301134591691.jpg" alt></p><p>2009年1月12日，第一笔比特币交易，中本聪发送了 10 比特币给开发者、密码学活动份子，Hal Finney（哈尔·芬尼）。</p><p>2009年10月5日，有记录的最早比特币汇率： 1 美元 = 1309.03 比特币。</p><p>参考：<br><a href="https://en.wikipedia.org/wiki/Ecash" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Ecash</a><br><a href="https://daimajia.com/2018/02/10/blockchain-share-in-freesfund" target="_blank" rel="noopener">https://daimajia.com/2018/02/10/blockchain-share-in-freesfund</a><br><a href="https://zhuanlan.zhihu.com/p/32754317" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/32754317</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;比特币诞生的背景？&quot;&gt;&lt;a href=&quot;#比特币诞生的背景？&quot; class=&quot;headerlink&quot; title=&quot;比特币诞生的背景？&quot;&gt;&lt;/a&gt;比特币诞生的背景？&lt;/h3&gt;&lt;p&gt;2008年，金融危机，当时政府和银行管理经济的能力遭到各方质疑，信用降入谷底。美国政
      
    
    </summary>
    
      <category term="区块链" scheme="http://haoweiguang.me/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="比特币" scheme="http://haoweiguang.me/tags/%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>JVM之Java堆</title>
    <link href="http://haoweiguang.me/2018/05/13/JVM%E4%B9%8BJava%E5%A0%86/"/>
    <id>http://haoweiguang.me/2018/05/13/JVM之Java堆/</id>
    <published>2018-05-13T02:05:48.000Z</published>
    <updated>2019-11-01T06:48:04.489Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JVM之Java堆"><a href="#JVM之Java堆" class="headerlink" title="JVM之Java堆"></a>JVM之Java堆</h1><p>先看图，搞清楚堆在运行区的位置<br><img src="http://images.insuncle.com/mweb/15725907891718.jpg" alt></p><blockquote><p>图片来自网络</p></blockquote><p><strong>介绍</strong><br>Java堆是JVM所管理内存中最大的一块，存放几乎所有对象实例（例外：栈上分配等）。这块是线程共享的区域。</p><p><img src="http://images.insuncle.com/mweb/15725908051364.jpg" alt></p><p>垃圾回收器管理的主要区域，现代的收集器基本都采用分代收集算法，所以可划分为新生代与老年代，新生代可进一步划分为Eden区、From Survivor区（S0）、To Survivor区（S1）。</p><p>可以处于物理上不连续内存空间中，所以标记-清理算法才会起作用。</p><p><strong>这个区域一些参数的解释</strong><br><img src="http://images.insuncle.com/mweb/15725908146701.jpg" alt></p><p>新生代与老年代的比例可以通过参数-XX:NewRatio来设置。比如，设置-XX:NewRatio=3，表示新生代:老年代=1:3，也就是说老年代占3/4。</p><p>Eden区、From Survivor区（S0）、To Survivor区（S1）之间的初始比例是8:1:1，通过-XX:SurvivorRatio参数来设置。比如：-XX:SurvivorRatio=8，表示两个Survivor:Eden = 2:8 ，每个Survivor占 1/10</p><p><strong>其他一些参数</strong></p><ul><li>-Xms：设置堆内存最小值</li><li>-Xmx：设置堆内存最大值</li><li>-Xmn堆中新生代初始及最大大小（NewSize和MaxNewSize为其细化）</li><li>-XX:NewSize设置新生代最小空间大小</li><li>-XX:MaxNewSize设置新生代最大空间大小</li><li>-XX:PermSize设置永久代最小空间大小</li><li>-XX:MaxPermSize设置永久代最大空间大小</li><li>-Xss设置每个线程的堆栈大小</li></ul><p>是不是参数太多，不容易记，这里有个记忆的小技巧</p><blockquote><p>Xmx（memory maximum）, Xms（memory startup）, Xmn（memory nursery/new）, Xss（stack size）</p></blockquote><p>对于参数的格式可以这样理解</p><ul><li>-: 标准VM选项，VM规范的选项。</li><li>-X: 非标准VM选项，不保证所有VM支持。</li><li>-XX: 高级选项，高级特性，但属于不稳定的选项。</li></ul><p><strong>会触发的异常</strong><br>OutOfMemoryError，堆中没有内存完成实例分配，并堆也无法再扩展时会触发。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JVM之Java堆&quot;&gt;&lt;a href=&quot;#JVM之Java堆&quot; class=&quot;headerlink&quot; title=&quot;JVM之Java堆&quot;&gt;&lt;/a&gt;JVM之Java堆&lt;/h1&gt;&lt;p&gt;先看图，搞清楚堆在运行区的位置&lt;br&gt;&lt;img src=&quot;http://images
      
    
    </summary>
    
      <category term="Java" scheme="http://haoweiguang.me/categories/Java/"/>
    
    
      <category term="JVM" scheme="http://haoweiguang.me/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM之程序计数器</title>
    <link href="http://haoweiguang.me/2018/04/29/JVM%E4%B9%8B%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
    <id>http://haoweiguang.me/2018/04/29/JVM之程序计数器/</id>
    <published>2018-04-29T04:48:38.000Z</published>
    <updated>2019-10-29T08:38:44.402Z</updated>
    
    <content type="html"><![CDATA[<p>JVM运行时数据区的图，从这个图能清楚程序计数器的位置<br><img src="http://images.insuncle.com/mweb/15723360448435.jpg" alt></p><p>线程私有的，生命周期与线程相同</p><h3 id="什么是程序计数器？"><a href="#什么是程序计数器？" class="headerlink" title="什么是程序计数器？"></a>什么是程序计数器？</h3><p>通俗的讲就是告诉当前线程该执行哪条字节码了。</p><p>周志明定义</p><blockquote><p>可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里，字节码解释器的工作就是通过改变程序计数器的值来选择下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都要依赖这个计数器来完成。</p></blockquote><h3 id="程序计数器存在哪？"><a href="#程序计数器存在哪？" class="headerlink" title="程序计数器存在哪？"></a>程序计数器存在哪？</h3><p>虚拟机区别于硬件，组成原理里学的程序计数器是用CS和IP寄存器来存，来表示指令地址。<br>而Java把程序计数器存在内存里。</p><h3 id="程序计数器保存内容？"><a href="#程序计数器保存内容？" class="headerlink" title="程序计数器保存内容？"></a>程序计数器保存内容？</h3><p>两种情况：<br>一、存的是Java字节码的地址，实现上可能有两种形式：<br>1.是相对该方法字节码开始处的偏移量，叫做bytecode index，简称bci；<br>2.是该Java字节码指令在内存里的地址，叫做bytecode pointer，简称bcp。</p><p>二、为空（Undefined）<br>如果调用的是Native方法</p><h3 id="程序计数器有啥作用？"><a href="#程序计数器有啥作用？" class="headerlink" title="程序计数器有啥作用？"></a>程序计数器有啥作用？</h3><p>现实中程序往往是多线程协作完成任务的。JVM的多线程是通过CPU时间片轮转来实现的，某个线程在执行的过程中可能会因为时间片耗尽而挂起。当它再次获取时间片时，需要从挂起的地方继续执行。在JVM中，通过程序计数器来记录程序的字节码执行位置。程序计数器具有线程隔离性，每个线程拥有自己的程序计数器</p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>此区域一般不会发生OutOfMemoryError，如果发生此类异常，排查的时候先别着急找这块了。</p><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>是跟操作系统中的程序计数器有点类似。这个有时间再补充吧。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.sunjs.com/article/detail/6700cb3679744dc190adfdd9202d4055.html" target="_blank" rel="noopener">https://www.sunjs.com/article/detail/6700cb3679744dc190adfdd9202d4055.html</a></li><li><a href="https://www.cnblogs.com/noKing/p/8157608.html" target="_blank" rel="noopener">https://www.cnblogs.com/noKing/p/8157608.html</a></li><li>《深入理解Java虚拟机》</li><li><a href="https://www.zhihu.com/question/40598119/answer/87381512" target="_blank" rel="noopener">https://www.zhihu.com/question/40598119/answer/87381512</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JVM运行时数据区的图，从这个图能清楚程序计数器的位置&lt;br&gt;&lt;img src=&quot;http://images.insuncle.com/mweb/15723360448435.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;线程私有的，生命周期与线程相同&lt;/p&gt;
&lt;h3 id=&quot;什么是程
      
    
    </summary>
    
      <category term="Java" scheme="http://haoweiguang.me/categories/Java/"/>
    
    
      <category term="JVM" scheme="http://haoweiguang.me/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>区块链和生产关系</title>
    <link href="http://haoweiguang.me/2018/03/11/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%92%8C%E7%94%9F%E4%BA%A7%E5%85%B3%E7%B3%BB/"/>
    <id>http://haoweiguang.me/2018/03/11/区块链和生产关系/</id>
    <published>2018-03-11T09:04:27.000Z</published>
    <updated>2018-03-11T09:04:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>之所以说区块链是生产关系，就是因为区块链技术可以很完美地为不同参与者分配利益。各方人对这种利益的分配规则的认可，就是一种共识。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之所以说区块链是生产关系，就是因为区块链技术可以很完美地为不同参与者分配利益。各方人对这种利益的分配规则的认可，就是一种共识。&lt;/p&gt;

      
    
    </summary>
    
      <category term="区块链" scheme="http://haoweiguang.me/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="http://haoweiguang.me/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>《数字黄金》读书笔记</title>
    <link href="http://haoweiguang.me/2018/02/04/2018-02-04/"/>
    <id>http://haoweiguang.me/2018/02/04/2018-02-04/</id>
    <published>2018-02-04T13:42:26.000Z</published>
    <updated>2018-02-04T14:41:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="比特币的优势"><a href="#比特币的优势" class="headerlink" title="比特币的优势"></a>比特币的优势</h2><ul><li>匿名</li><li>绝对个人所有</li><li>跨境支付，速度快，手续费低</li><li>抗通货膨胀</li></ul><p>相比于现有货币，具备稀缺，分割性更强，耐用性更强，流通性更强</p><h2 id="比特币的价格"><a href="#比特币的价格" class="headerlink" title="比特币的价格"></a>比特币的价格</h2><p>全世界的黄金的价值应该是7万亿美元。假如比特币在全世界一半的地区流行，每个比特币的价格应该在50万美元</p><p>全球货币种类：170种（来自于维基百科），大概只有5%比较有价值，8种左右，美元、欧元、人民币、日元、英镑</p><h2 id="比特币的价值"><a href="#比特币的价值" class="headerlink" title="比特币的价值"></a>比特币的价值</h2><p>比特币的价值在于存储价值，不一定在交易上有多强悍的功能，类似黄金，比特币它自身有支付功能，但重点不在支付。它的重点是资产，是资产带支付，而不是支付带资产，反过来。什么意思呢？就是这个东西本身像黄金，也是一个商品嘛。但黄金有没有免费的支付，黄金从这边搬到那边要把它搬过去的 ，黄金没有脚不会走过去。比特币就不同，比特币是资产啊，但你叫它走过去，它可以自己走过去的。因为移动数字很便宜，没有成本嘛。所以它是资产带支付。</p><p>13年的时候百度的云保安服务就开始接收比特币支付，这个还挺让人惊奇的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;比特币的优势&quot;&gt;&lt;a href=&quot;#比特币的优势&quot; class=&quot;headerlink&quot; title=&quot;比特币的优势&quot;&gt;&lt;/a&gt;比特币的优势&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;匿名&lt;/li&gt;
&lt;li&gt;绝对个人所有&lt;/li&gt;
&lt;li&gt;跨境支付，速度快，手续费低&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="区块链" scheme="http://haoweiguang.me/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="比特币" scheme="http://haoweiguang.me/tags/%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
      <category term="区块链" scheme="http://haoweiguang.me/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="读书笔记" scheme="http://haoweiguang.me/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Oracle学习笔记——配置监听</title>
    <link href="http://haoweiguang.me/2017/09/26/Oracle%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E9%85%8D%E7%BD%AE%E7%9B%91%E5%90%AC/"/>
    <id>http://haoweiguang.me/2017/09/26/Oracle学习笔记——配置监听/</id>
    <published>2017-09-26T07:58:26.000Z</published>
    <updated>2017-09-26T07:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是监听"><a href="#什么是监听" class="headerlink" title="什么是监听"></a>什么是监听</h3><p>如果你做过网络开发，对于监听listen就比较熟悉了，监听是什么，在网络开发中，就是监听某个端口，等待客户端的连接。同理，在Oracle中，监听的意思也和这差不多。</p><p>在Oracle数据库服务器中，通过一个叫“监听器”的组件接收来自客户端的连接请求，它是客户端和 服务器端中间的桥梁。监听器虽然在Oracle服务器端，但是它和Oracle主进程并不绑定，它是一个独立运行在服务器端的后台进程，独立于数据库运行。它负责对客户端传入的连接请求进行监听，并且对服务器端的连接负荷进行调整。当客户端准备建立一个到服务器端的连接时，监听器接收客户端的连接请求， 然后再将这个客户端连接请求交给服务器进行处理，一旦客户端和服务器建立连接，客户端和服务器以后就直接进行通信，而不再需要监听器的参与，这就好比师傅 领进门，修行靠个人。就如下图所示：<br><img src="http://oo501cyv7.bkt.clouddn.com/15064117419478.png" alt></p><ol><li>客户端向服务器端发出连接请求，监听器监听到客户端的连接请求；</li><li>监听器把客户端的连接请求交给数据库服务器进行处理；</li><li>经过监听器建立连接以后，客户端与服务器端就可以直接进行通信，而不再需要监听器的参与了。<br>以上就是监听器干的活，也就是说，你对数据库服务器的第一次，肯定会给监听器，如果监听器没有配好，你就甭想连数据库了。那么，怎么才能配好监听器呢？主要涉及以下三个文件：</li></ol><p><strong>listener.ora、sqlnet.ora和tnsnames.ora文件</strong></p><h4 id="listener-ora文件"><a href="#listener-ora文件" class="headerlink" title="listener.ora文件"></a>listener.ora文件</h4><p>打开listener.ora文件看看，贴上一部分有代表性的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#这是一个名为LISTENER1的监听器</span><br><span class="line">#监听的协议是TCP协议</span><br><span class="line">#监听的主机IP是127.0.0.1</span><br><span class="line">#监听的端口是1521端口</span><br><span class="line">LISTENER1 =</span><br><span class="line">    (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = 127.0.0.1)(PORT = 1521))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">#记录了监听器LISTENER1服务的全局数据库名、数据库路径和数据库实例名</span><br><span class="line">SID_LIST_LISTENER1 =</span><br><span class="line">    (SID_LIST =</span><br><span class="line">        (SID_DESC =</span><br><span class="line">            (GLOBAL_DBNAME = ORCL)</span><br><span class="line">            (ORACLE_HOME = C:\Oracle11g\product\11.2.0\dbhome_1)</span><br><span class="line">            (SID_NAME = ORCL)</span><br><span class="line">        )</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h4 id="sqlnet-ora文件"><a href="#sqlnet-ora文件" class="headerlink" title="sqlnet.ora文件"></a>sqlnet.ora文件</h4><p>打开sqlnet.ora文件看看，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SQLNET.AUTHENTICATION_SERVICES= (NTS)</span><br><span class="line">NAMES.DIRECTORY_PATH= (TNSNAMES, EZCONNECT)</span><br></pre></td></tr></table></figure><p>这个sqlnet.ora文件实际上就是一个配置文件，主要是和接下来说的tnsnames.ora配合使用。</p><h4 id="tnsnames-ora文件"><a href="#tnsnames-ora文件" class="headerlink" title="tnsnames.ora文件"></a>tnsnames.ora文件</h4><p>tnsnames.ora文件存放于客户端机器上，和sqlnet.ora文件配合使用。可以简单的看看tnsnames.ora文件中的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#ORCL是个别名</span><br><span class="line">#这条信息记录了我们使用TCP协议，去连接IP地址为127.0.0.1，端口号为1521的数据库主机上服务名为orcl的数据库</span><br><span class="line">ORCL =</span><br><span class="line">    (DESCRIPTION =</span><br><span class="line">        (ADDRESS = (PROTOCOL = TCP)(HOST = 127.0.0.1)(PORT = 1521))</span><br><span class="line">        (CONNECT_DATA =</span><br><span class="line">            (SERVER = DEDICATED)</span><br><span class="line">            (SERVICE_NAME = orcl)</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">以后，我们还会配置更多的数据库连接信息，比如我要连接192.168.10.2主机上的数据库，我们只需要在tnsnames.ora中继续追加新的连接信息即可，比如：</span><br><span class="line"></span><br><span class="line">STDB =</span><br><span class="line">    (DESCRIPTION =</span><br><span class="line">        (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.10.2)(PORT = 1521))</span><br><span class="line">        (CONNECT_DATA =</span><br><span class="line">            (SERVER = DEDICATED)</span><br><span class="line">            (SERVICE_NAME = stdb)</span><br><span class="line">        )</span><br><span class="line">     )</span><br></pre></td></tr></table></figure><h3 id="服务器端配置"><a href="#服务器端配置" class="headerlink" title="服务器端配置"></a>服务器端配置</h3><p>直接编辑listener.ora，就像下面这样，配置一个新的监听器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">LISTENER =</span><br><span class="line">    (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = 127.0.0.1)(PORT = 1521))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">SID_LIST_LISTENER =</span><br><span class="line">    (SID_LIST =</span><br><span class="line">        (SID_DESC =</span><br><span class="line">            (GLOBAL_DBNAME = ORCL)</span><br><span class="line">            (ORACLE_HOME = C:\Oracle11g\product\11.2.0\dbhome_1)</span><br><span class="line">            (SID_NAME = ORCL)</span><br><span class="line">        )</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>你想在哪个数据库上配置一个新的监听，就修改对应的内容即可。</p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p>启动监听器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lsnrctl start &lt;监听器的名字&gt;</span><br><span class="line"></span><br><span class="line">// 启动名为LISTENER的监听器</span><br><span class="line">lsnrctl start LISTENER</span><br></pre></td></tr></table></figure><p>当我们不指定监听器的名字时，就默认启动LISTENER监听器；</p><p>关闭监听器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lsnrctl stop &lt;监听器的名字&gt;</span><br><span class="line"></span><br><span class="line">// 关闭名为LISTENER的监听器</span><br><span class="line">lsnrctl stop LISTENER</span><br></pre></td></tr></table></figure><p>当我们不指定监听器的名字时，就默认关闭LISTENER监听器；</p><p>查看监听器的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lsnrctl status &lt;监听器的名字&gt;</span><br><span class="line"></span><br><span class="line">// 查看名为LISTENER的监听器的运行状态</span><br><span class="line">lsnrctl status LISTENER</span><br></pre></td></tr></table></figure><p>当我们不指定监听器的名字时，就默认查看LISTENER监听器的状态。</p><p>测试连通性<br>可以使用工具<code>TNSPING</code></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://www.jellythink.com/archives/985" target="_blank" rel="noopener">Oracle学习笔记——配置监听</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是监听&quot;&gt;&lt;a href=&quot;#什么是监听&quot; class=&quot;headerlink&quot; title=&quot;什么是监听&quot;&gt;&lt;/a&gt;什么是监听&lt;/h3&gt;&lt;p&gt;如果你做过网络开发，对于监听listen就比较熟悉了，监听是什么，在网络开发中，就是监听某个端口，等待客户端的连接。
      
    
    </summary>
    
      <category term="数据库" scheme="http://haoweiguang.me/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="oracle" scheme="http://haoweiguang.me/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>Oracle学习笔记——Linux设置Oracle环境变量</title>
    <link href="http://haoweiguang.me/2017/09/25/Oracle%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Linux%E8%AE%BE%E7%BD%AEOracle%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>http://haoweiguang.me/2017/09/25/Oracle学习笔记——Linux设置Oracle环境变量/</id>
    <published>2017-09-25T08:32:06.000Z</published>
    <updated>2019-10-16T06:20:51.270Z</updated>
    
    <content type="html"><![CDATA[<p>有三种设置方法，具体如下：</p><p>方法一：直接运行export命令定义变量,<strong>该变量只在当前的shell（BASH）或其子shell（BASH）下是有效的</strong>，shell关闭了，变量也就失效了，再打开新shell时就没有这个变量，需要使用的话还需要重新定义。</p><p>以设置oracle环境变量为例<br><img src="http://oo501cyv7.bkt.clouddn.com/15063281966273.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export ORACLE_BASE=/data/app/oracle; </span><br><span class="line">export ORACLE_HOME=$ORACLE_BASE/product/12.1.0/dbhome_1; </span><br><span class="line">export ORACLE_SID=orcl; </span><br><span class="line">export PATH=$ORACLE_HOME/bin:$PATH;</span><br></pre></td></tr></table></figure><p>方法二：在用户目录下的.bash_profile文件中增加变量，改变量<strong>仅会对当前用户有效</strong>，并且是“永久的”。</p><p><img src="http://oo501cyv7.bkt.clouddn.com/15063282260029.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ORACLE_BASE=/data/app/oracle;                          export ORACLE_BASE</span><br><span class="line">ORACLE_HOME=$ORACLE_BASE/product/12.1.0/dbhome_1;      export ORACLE_HOME</span><br><span class="line">ORACLE_SID=orcl;                                       export ORACLE_SID</span><br><span class="line">PATH=$ORACLE_HOME/bin:$PATH;                           export PATH</span><br></pre></td></tr></table></figure><p>方法三： 在/etc/profile文件中添加变量，该变量将<strong>会对Linux下所有用户有效</strong>，并且是“永久的”。</p><p><img src="http://oo501cyv7.bkt.clouddn.com/15063282550340.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ORACLE_BASE=/data/app/oracle;                        export ORACLE_BASE</span><br><span class="line">ORACLE_HOME=$ORACLE_BASE/product/12.1.0/dbhome_1;    export ORACLE_HOME</span><br><span class="line">ORACLE_SID=orcl;                                     export ORACLE_SID</span><br><span class="line">PATH=$ORACLE_HOME/bin:$PATH;                         export PATH</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有三种设置方法，具体如下：&lt;/p&gt;
&lt;p&gt;方法一：直接运行export命令定义变量,&lt;strong&gt;该变量只在当前的shell（BASH）或其子shell（BASH）下是有效的&lt;/strong&gt;，shell关闭了，变量也就失效了，再打开新shell时就没有这个变量，需要使用
      
    
    </summary>
    
      <category term="数据库" scheme="http://haoweiguang.me/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="oracle" scheme="http://haoweiguang.me/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>Linux环境变量总结</title>
    <link href="http://haoweiguang.me/2017/09/25/Linux%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%80%BB%E7%BB%93/"/>
    <id>http://haoweiguang.me/2017/09/25/Linux环境变量总结/</id>
    <published>2017-09-25T08:21:24.000Z</published>
    <updated>2017-09-25T08:22:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>Linux是一个多用户多任务的操作系统，可以==在Linux中为不同的用户设置不同的运行环境==，具体做法是设置不同用户的环境变量。</p><h3 id="Linux环境变量分类"><a href="#Linux环境变量分类" class="headerlink" title="Linux环境变量分类"></a>Linux环境变量分类</h3><p>一、按照生命周期来分，Linux环境变量可以分为两类：<br>1、永久的：需要用户修改相关的配置文件，变量永久生效。<br>2、临时的：用户利用export命令，在当前终端下声明环境变量，关闭Shell终端失效。</p><p>二、按照作用域来分，Linux环境变量可以分为：<br>1、系统环境变量：系统环境变量对该系统中所有用户都有效。<br>2、用户环境变量：顾名思义，这种类型的环境变量只对特定的用户有效。</p><h3 id="Linux设置环境变量的方法"><a href="#Linux设置环境变量的方法" class="headerlink" title="Linux设置环境变量的方法"></a>Linux设置环境变量的方法</h3><p>一、在<code>/etc/profile</code>文件中添加变量 <strong>对所有用户生效（永久的）</strong><br>用vim在文件<code>/etc/profile</code>文件中增加变量，该变量将会对Linux下所有用户有效，并且是“永久的”。<br>例如：编辑<code>/etc/profile</code>文件，添加<code>CLASSPATH</code>变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile    </span><br><span class="line">export CLASSPATH=./JAVA_HOME/lib;$JAVA_HOME/jre/lib</span><br></pre></td></tr></table></figure><p>注：修改文件后要想马上生效还要运行<code>source /etc/profile</code>不然只能在下次重进此用户时生效。</p><p>二、在用户目录下的<code>.bash_profile</code>文件中增加变量 【<strong>对单一用户生效（永久的）</strong>】<br>用<code>vim ~/.bash_profile</code>文件中增加变量，改变量仅会对当前用户有效，并且是“永久的”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash.profile</span><br><span class="line">export CLASSPATH=./JAVA_HOME/lib;$JAVA_HOME/jre/lib</span><br></pre></td></tr></table></figure><p>注：修改文件后要想马上生效还要运行<code>$ source ~/.bash_profile</code>不然只能在下次重进此用户时生效。</p><p>三、直接运行export命令定义变量 【<strong>只对当前shell（BASH）有效（临时的）</strong>】<br>在shell的命令行下直接使用<code>export 变量名=变量值</code><br>定义变量，该变量只在当前的shell（BASH）或其子shell（BASH）下是有效的，shell关闭了，变量也就失效了，再打开新shell时就没有这个变量，需要使用的话还需要重新定义。</p><h3 id="Linux环境变量使用"><a href="#Linux环境变量使用" class="headerlink" title="Linux环境变量使用"></a>Linux环境变量使用</h3><p>一、Linux中常见的环境变量有：</p><p>PATH：指定命令的搜索路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PATH声明用法：</span><br><span class="line">PATH=$PAHT:&lt;PATH 1&gt;:&lt;PATH 2&gt;:&lt;PATH 3&gt;:--------:&lt; PATH n &gt;</span><br><span class="line">export PATH</span><br><span class="line">你可以自己加上指定的路径，中间用冒号隔开。环境变量更改后，在用户下次登陆时生效。</span><br><span class="line">可以利用echo $PATH查看当前当前系统PATH路径。</span><br></pre></td></tr></table></figure><p>HOME：指定用户的主工作目录（即用户登陆到Linux系统中时，默认的目录）。<br>HISTSIZE：指保存历史命令记录的条数。<br>LOGNAME：指当前用户的登录名。<br>HOSTNAME：指主机的名称，许多应用程序如果要用到主机名的话，通常是从这个环境变量中来取得的<br>SHELL：指当前用户用的是哪种Shell。<br>LANG/LANGUGE：和语言相关的环境变量，使用多种语言的用户可以修改此环境变量。<br>MAIL：指当前用户的邮件存放目录。</p><p>注意：上述变量的名字并不固定，如HOSTNAME在某些Linux系统中可能设置成HOST</p><p>二、Linux也提供了修改和查看环境变量的命令，下面通过几个实例来说明：</p><p>echo 显示某个环境变量值 echo $PATH<br>export 设置一个新的环境变量 export HELLO=”hello” (可以无引号)<br>env 显示所有环境变量<br>set 显示本地定义的shell变量<br>unset 清除环境变量 unset HELLO<br>readonly 设置只读环境变量 readonly HELLO</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Linux是一个多用户多任务的操作系统，可以==在Linux中为不同的用户设置不同的运行环境==，具体做法是设置不同用户的环境变量。&lt;/p&gt;
&lt;h3 id=&quot;Linux环境变量分类&quot;&gt;&lt;a href=&quot;#Linux环境变量分类&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="理解计算器机" scheme="http://haoweiguang.me/categories/%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E5%99%A8%E6%9C%BA/"/>
    
    
      <category term="linux" scheme="http://haoweiguang.me/tags/linux/"/>
    
      <category term="环境变量" scheme="http://haoweiguang.me/tags/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
</feed>
